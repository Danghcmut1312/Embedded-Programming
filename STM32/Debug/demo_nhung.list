
demo_nhung.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004384  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08004494  08004494  00014494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004650  08004650  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004650  08004650  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004650  08004650  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004650  08004650  00014650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004654  08004654  00014654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001138  20000074  080046cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011ac  080046cc  000211ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133fc  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c69  00000000  00000000  00033499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00036108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00037188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019421  00000000  00000000  00038108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143c4  00000000  00000000  00051529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec70  00000000  00000000  000658ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f455d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004730  00000000  00000000  000f45b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	0800447c 	.word	0x0800447c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	0800447c 	.word	0x0800447c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <lcd_send_cmd>:
#include "i2c-lcd.h"
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup
void lcd_send_cmd (char cmd)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b086      	sub	sp, #24
 8000184:	af02      	add	r7, sp, #8
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	f023 030f 	bic.w	r3, r3, #15
 8000190:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	011b      	lsls	r3, r3, #4
 8000196:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000198:	7bfb      	ldrb	r3, [r7, #15]
 800019a:	f043 030c 	orr.w	r3, r3, #12
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80001a2:	7bfb      	ldrb	r3, [r7, #15]
 80001a4:	f043 0308 	orr.w	r3, r3, #8
 80001a8:	b2db      	uxtb	r3, r3
 80001aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80001ac:	7bbb      	ldrb	r3, [r7, #14]
 80001ae:	f043 030c 	orr.w	r3, r3, #12
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80001b6:	7bbb      	ldrb	r3, [r7, #14]
 80001b8:	f043 0308 	orr.w	r3, r3, #8
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001c0:	f107 0208 	add.w	r2, r7, #8
 80001c4:	2364      	movs	r3, #100	; 0x64
 80001c6:	9300      	str	r3, [sp, #0]
 80001c8:	2304      	movs	r3, #4
 80001ca:	214e      	movs	r1, #78	; 0x4e
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <lcd_send_cmd+0x5c>)
 80001ce:	f001 fa4b 	bl	8001668 <HAL_I2C_Master_Transmit>
}
 80001d2:	bf00      	nop
 80001d4:	3710      	adds	r7, #16
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	20000344 	.word	0x20000344

080001e0 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80001e4:	2032      	movs	r0, #50	; 0x32
 80001e6:	f000 fe3f 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd (0x30);
 80001ea:	2030      	movs	r0, #48	; 0x30
 80001ec:	f7ff ffc8 	bl	8000180 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80001f0:	2005      	movs	r0, #5
 80001f2:	f000 fe39 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd (0x30);
 80001f6:	2030      	movs	r0, #48	; 0x30
 80001f8:	f7ff ffc2 	bl	8000180 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80001fc:	2001      	movs	r0, #1
 80001fe:	f000 fe33 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000202:	2030      	movs	r0, #48	; 0x30
 8000204:	f7ff ffbc 	bl	8000180 <lcd_send_cmd>
	HAL_Delay(10);
 8000208:	200a      	movs	r0, #10
 800020a:	f000 fe2d 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800020e:	2020      	movs	r0, #32
 8000210:	f7ff ffb6 	bl	8000180 <lcd_send_cmd>
	HAL_Delay(10);
 8000214:	200a      	movs	r0, #10
 8000216:	f000 fe27 	bl	8000e68 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800021a:	2028      	movs	r0, #40	; 0x28
 800021c:	f7ff ffb0 	bl	8000180 <lcd_send_cmd>
	HAL_Delay(1);
 8000220:	2001      	movs	r0, #1
 8000222:	f000 fe21 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000226:	2008      	movs	r0, #8
 8000228:	f7ff ffaa 	bl	8000180 <lcd_send_cmd>
	HAL_Delay(1);
 800022c:	2001      	movs	r0, #1
 800022e:	f000 fe1b 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000232:	2001      	movs	r0, #1
 8000234:	f7ff ffa4 	bl	8000180 <lcd_send_cmd>
	HAL_Delay(1);
 8000238:	2001      	movs	r0, #1
 800023a:	f000 fe15 	bl	8000e68 <HAL_Delay>
	HAL_Delay(1);
 800023e:	2001      	movs	r0, #1
 8000240:	f000 fe12 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000244:	2006      	movs	r0, #6
 8000246:	f7ff ff9b 	bl	8000180 <lcd_send_cmd>
	HAL_Delay(1);
 800024a:	2001      	movs	r0, #1
 800024c:	f000 fe0c 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000250:	200c      	movs	r0, #12
 8000252:	f7ff ff95 	bl	8000180 <lcd_send_cmd>
}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <read_keypad>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char read_keypad (void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_RESET);  //Pull the R1 low
 8000260:	2200      	movs	r2, #0
 8000262:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000266:	48b9      	ldr	r0, [pc, #740]	; (800054c <read_keypad+0x2f0>)
 8000268:	f001 f8a1 	bl	80013ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 800026c:	2201      	movs	r2, #1
 800026e:	2108      	movs	r1, #8
 8000270:	48b7      	ldr	r0, [pc, #732]	; (8000550 <read_keypad+0x2f4>)
 8000272:	f001 f89c 	bl	80013ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 8000276:	2201      	movs	r2, #1
 8000278:	2110      	movs	r1, #16
 800027a:	48b5      	ldr	r0, [pc, #724]	; (8000550 <read_keypad+0x2f4>)
 800027c:	f001 f897 	bl	80013ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 8000280:	2201      	movs	r2, #1
 8000282:	2120      	movs	r1, #32
 8000284:	48b2      	ldr	r0, [pc, #712]	; (8000550 <read_keypad+0x2f4>)
 8000286:	f001 f892 	bl	80013ae <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (C1_PORT, C1_PIN))==0)   // if the Col 1 is low
 800028a:	2140      	movs	r1, #64	; 0x40
 800028c:	48b0      	ldr	r0, [pc, #704]	; (8000550 <read_keypad+0x2f4>)
 800028e:	f001 f877 	bl	8001380 <HAL_GPIO_ReadPin>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d109      	bne.n	80002ac <read_keypad+0x50>
	{
		while ((HAL_GPIO_ReadPin (C1_PORT, C1_PIN))==0);   // wait till the button is pressed
 8000298:	bf00      	nop
 800029a:	2140      	movs	r1, #64	; 0x40
 800029c:	48ac      	ldr	r0, [pc, #688]	; (8000550 <read_keypad+0x2f4>)
 800029e:	f001 f86f 	bl	8001380 <HAL_GPIO_ReadPin>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d0f8      	beq.n	800029a <read_keypad+0x3e>
		return '1';
 80002a8:	2331      	movs	r3, #49	; 0x31
 80002aa:	e14d      	b.n	8000548 <read_keypad+0x2ec>
	}

	if ((HAL_GPIO_ReadPin (C2_PORT, C2_PIN))==0)   // if the Col 2 is low
 80002ac:	2180      	movs	r1, #128	; 0x80
 80002ae:	48a8      	ldr	r0, [pc, #672]	; (8000550 <read_keypad+0x2f4>)
 80002b0:	f001 f866 	bl	8001380 <HAL_GPIO_ReadPin>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d109      	bne.n	80002ce <read_keypad+0x72>
	{
		while ((HAL_GPIO_ReadPin (C2_PORT, C2_PIN))==0);   // wait till the button is pressed
 80002ba:	bf00      	nop
 80002bc:	2180      	movs	r1, #128	; 0x80
 80002be:	48a4      	ldr	r0, [pc, #656]	; (8000550 <read_keypad+0x2f4>)
 80002c0:	f001 f85e 	bl	8001380 <HAL_GPIO_ReadPin>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d0f8      	beq.n	80002bc <read_keypad+0x60>
		return '2';
 80002ca:	2332      	movs	r3, #50	; 0x32
 80002cc:	e13c      	b.n	8000548 <read_keypad+0x2ec>
	}

	if ((HAL_GPIO_ReadPin (C3_PORT, C3_PIN))==0)   // if the Col 3 is low
 80002ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002d2:	489f      	ldr	r0, [pc, #636]	; (8000550 <read_keypad+0x2f4>)
 80002d4:	f001 f854 	bl	8001380 <HAL_GPIO_ReadPin>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d10a      	bne.n	80002f4 <read_keypad+0x98>
	{
		while ((HAL_GPIO_ReadPin (C3_PORT, C3_PIN))==0);   // wait till the button is pressed
 80002de:	bf00      	nop
 80002e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e4:	489a      	ldr	r0, [pc, #616]	; (8000550 <read_keypad+0x2f4>)
 80002e6:	f001 f84b 	bl	8001380 <HAL_GPIO_ReadPin>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d0f7      	beq.n	80002e0 <read_keypad+0x84>
		return '3';
 80002f0:	2333      	movs	r3, #51	; 0x33
 80002f2:	e129      	b.n	8000548 <read_keypad+0x2ec>
	}

	if ((HAL_GPIO_ReadPin (C4_PORT, C4_PIN))==0)   // if the Col 4 is low
 80002f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f8:	4895      	ldr	r0, [pc, #596]	; (8000550 <read_keypad+0x2f4>)
 80002fa:	f001 f841 	bl	8001380 <HAL_GPIO_ReadPin>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d10a      	bne.n	800031a <read_keypad+0xbe>
	{
		while ((HAL_GPIO_ReadPin (C4_PORT, C4_PIN))==0);   // wait till the button is pressed
 8000304:	bf00      	nop
 8000306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800030a:	4891      	ldr	r0, [pc, #580]	; (8000550 <read_keypad+0x2f4>)
 800030c:	f001 f838 	bl	8001380 <HAL_GPIO_ReadPin>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d0f7      	beq.n	8000306 <read_keypad+0xaa>
		return 'A';
 8000316:	2341      	movs	r3, #65	; 0x41
 8000318:	e116      	b.n	8000548 <read_keypad+0x2ec>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 800031a:	2201      	movs	r2, #1
 800031c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000320:	488a      	ldr	r0, [pc, #552]	; (800054c <read_keypad+0x2f0>)
 8000322:	f001 f844 	bl	80013ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);  // Pull the R2 High
 8000326:	2200      	movs	r2, #0
 8000328:	2108      	movs	r1, #8
 800032a:	4889      	ldr	r0, [pc, #548]	; (8000550 <read_keypad+0x2f4>)
 800032c:	f001 f83f 	bl	80013ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 8000330:	2201      	movs	r2, #1
 8000332:	2110      	movs	r1, #16
 8000334:	4886      	ldr	r0, [pc, #536]	; (8000550 <read_keypad+0x2f4>)
 8000336:	f001 f83a 	bl	80013ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 800033a:	2201      	movs	r2, #1
 800033c:	2120      	movs	r1, #32
 800033e:	4884      	ldr	r0, [pc, #528]	; (8000550 <read_keypad+0x2f4>)
 8000340:	f001 f835 	bl	80013ae <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (C1_PORT, C1_PIN))==0)   // if the Col 1 is low
 8000344:	2140      	movs	r1, #64	; 0x40
 8000346:	4882      	ldr	r0, [pc, #520]	; (8000550 <read_keypad+0x2f4>)
 8000348:	f001 f81a 	bl	8001380 <HAL_GPIO_ReadPin>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d109      	bne.n	8000366 <read_keypad+0x10a>
	{
		while ((HAL_GPIO_ReadPin (C1_PORT, C1_PIN))==0);   // wait till the button is pressed
 8000352:	bf00      	nop
 8000354:	2140      	movs	r1, #64	; 0x40
 8000356:	487e      	ldr	r0, [pc, #504]	; (8000550 <read_keypad+0x2f4>)
 8000358:	f001 f812 	bl	8001380 <HAL_GPIO_ReadPin>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d0f8      	beq.n	8000354 <read_keypad+0xf8>
		return '4';
 8000362:	2334      	movs	r3, #52	; 0x34
 8000364:	e0f0      	b.n	8000548 <read_keypad+0x2ec>
	}

	if ((HAL_GPIO_ReadPin (C2_PORT, C2_PIN))==0)   // if the Col 2 is low
 8000366:	2180      	movs	r1, #128	; 0x80
 8000368:	4879      	ldr	r0, [pc, #484]	; (8000550 <read_keypad+0x2f4>)
 800036a:	f001 f809 	bl	8001380 <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d109      	bne.n	8000388 <read_keypad+0x12c>
	{
		while ((HAL_GPIO_ReadPin (C2_PORT, C2_PIN))==0);   // wait till the button is pressed
 8000374:	bf00      	nop
 8000376:	2180      	movs	r1, #128	; 0x80
 8000378:	4875      	ldr	r0, [pc, #468]	; (8000550 <read_keypad+0x2f4>)
 800037a:	f001 f801 	bl	8001380 <HAL_GPIO_ReadPin>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d0f8      	beq.n	8000376 <read_keypad+0x11a>
		return '5';
 8000384:	2335      	movs	r3, #53	; 0x35
 8000386:	e0df      	b.n	8000548 <read_keypad+0x2ec>
	}

	if ((HAL_GPIO_ReadPin (C3_PORT, C3_PIN))==0)   // if the Col 3 is low
 8000388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800038c:	4870      	ldr	r0, [pc, #448]	; (8000550 <read_keypad+0x2f4>)
 800038e:	f000 fff7 	bl	8001380 <HAL_GPIO_ReadPin>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d10a      	bne.n	80003ae <read_keypad+0x152>
	{
		while ((HAL_GPIO_ReadPin (C3_PORT, C3_PIN))==0);   // wait till the button is pressed
 8000398:	bf00      	nop
 800039a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800039e:	486c      	ldr	r0, [pc, #432]	; (8000550 <read_keypad+0x2f4>)
 80003a0:	f000 ffee 	bl	8001380 <HAL_GPIO_ReadPin>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d0f7      	beq.n	800039a <read_keypad+0x13e>
		return '6';
 80003aa:	2336      	movs	r3, #54	; 0x36
 80003ac:	e0cc      	b.n	8000548 <read_keypad+0x2ec>
	}

	if ((HAL_GPIO_ReadPin (C4_PORT, C4_PIN))==0)   // if the Col 4 is low
 80003ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b2:	4867      	ldr	r0, [pc, #412]	; (8000550 <read_keypad+0x2f4>)
 80003b4:	f000 ffe4 	bl	8001380 <HAL_GPIO_ReadPin>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d10a      	bne.n	80003d4 <read_keypad+0x178>
	{
		while ((HAL_GPIO_ReadPin (C4_PORT, C4_PIN))==0);   // wait till the button is pressed
 80003be:	bf00      	nop
 80003c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003c4:	4862      	ldr	r0, [pc, #392]	; (8000550 <read_keypad+0x2f4>)
 80003c6:	f000 ffdb 	bl	8001380 <HAL_GPIO_ReadPin>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d0f7      	beq.n	80003c0 <read_keypad+0x164>
		return 'B';
 80003d0:	2342      	movs	r3, #66	; 0x42
 80003d2:	e0b9      	b.n	8000548 <read_keypad+0x2ec>
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 80003d4:	2201      	movs	r2, #1
 80003d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003da:	485c      	ldr	r0, [pc, #368]	; (800054c <read_keypad+0x2f0>)
 80003dc:	f000 ffe7 	bl	80013ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 80003e0:	2201      	movs	r2, #1
 80003e2:	2108      	movs	r1, #8
 80003e4:	485a      	ldr	r0, [pc, #360]	; (8000550 <read_keypad+0x2f4>)
 80003e6:	f000 ffe2 	bl	80013ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);  // Pull the R3 High
 80003ea:	2200      	movs	r2, #0
 80003ec:	2110      	movs	r1, #16
 80003ee:	4858      	ldr	r0, [pc, #352]	; (8000550 <read_keypad+0x2f4>)
 80003f0:	f000 ffdd 	bl	80013ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 80003f4:	2201      	movs	r2, #1
 80003f6:	2120      	movs	r1, #32
 80003f8:	4855      	ldr	r0, [pc, #340]	; (8000550 <read_keypad+0x2f4>)
 80003fa:	f000 ffd8 	bl	80013ae <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (C1_PORT, C1_PIN))==0)   // if the Col 1 is low
 80003fe:	2140      	movs	r1, #64	; 0x40
 8000400:	4853      	ldr	r0, [pc, #332]	; (8000550 <read_keypad+0x2f4>)
 8000402:	f000 ffbd 	bl	8001380 <HAL_GPIO_ReadPin>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d109      	bne.n	8000420 <read_keypad+0x1c4>
	{
		while ((HAL_GPIO_ReadPin (C1_PORT, C1_PIN))==0);   // wait till the button is pressed
 800040c:	bf00      	nop
 800040e:	2140      	movs	r1, #64	; 0x40
 8000410:	484f      	ldr	r0, [pc, #316]	; (8000550 <read_keypad+0x2f4>)
 8000412:	f000 ffb5 	bl	8001380 <HAL_GPIO_ReadPin>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d0f8      	beq.n	800040e <read_keypad+0x1b2>
		return '7';
 800041c:	2337      	movs	r3, #55	; 0x37
 800041e:	e093      	b.n	8000548 <read_keypad+0x2ec>
	}

	if ((HAL_GPIO_ReadPin (C2_PORT, C2_PIN))==0)   // if the Col 2 is low
 8000420:	2180      	movs	r1, #128	; 0x80
 8000422:	484b      	ldr	r0, [pc, #300]	; (8000550 <read_keypad+0x2f4>)
 8000424:	f000 ffac 	bl	8001380 <HAL_GPIO_ReadPin>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d109      	bne.n	8000442 <read_keypad+0x1e6>
	{
		while ((HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 800042e:	bf00      	nop
 8000430:	2180      	movs	r1, #128	; 0x80
 8000432:	4847      	ldr	r0, [pc, #284]	; (8000550 <read_keypad+0x2f4>)
 8000434:	f000 ffa4 	bl	8001380 <HAL_GPIO_ReadPin>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d1f8      	bne.n	8000430 <read_keypad+0x1d4>
		return '8';
 800043e:	2338      	movs	r3, #56	; 0x38
 8000440:	e082      	b.n	8000548 <read_keypad+0x2ec>
	}

	if ((HAL_GPIO_ReadPin (C3_PORT, C3_PIN))==0)   // if the Col 3 is low
 8000442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000446:	4842      	ldr	r0, [pc, #264]	; (8000550 <read_keypad+0x2f4>)
 8000448:	f000 ff9a 	bl	8001380 <HAL_GPIO_ReadPin>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d10a      	bne.n	8000468 <read_keypad+0x20c>
	{
		while ((HAL_GPIO_ReadPin (C3_PORT, C3_PIN))==0);   // wait till the button is pressed
 8000452:	bf00      	nop
 8000454:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000458:	483d      	ldr	r0, [pc, #244]	; (8000550 <read_keypad+0x2f4>)
 800045a:	f000 ff91 	bl	8001380 <HAL_GPIO_ReadPin>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d0f7      	beq.n	8000454 <read_keypad+0x1f8>
		return '9';
 8000464:	2339      	movs	r3, #57	; 0x39
 8000466:	e06f      	b.n	8000548 <read_keypad+0x2ec>
	}

	if ((HAL_GPIO_ReadPin (C4_PORT, C4_PIN))==0)   // if the Col 4 is low
 8000468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800046c:	4838      	ldr	r0, [pc, #224]	; (8000550 <read_keypad+0x2f4>)
 800046e:	f000 ff87 	bl	8001380 <HAL_GPIO_ReadPin>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d10a      	bne.n	800048e <read_keypad+0x232>
	{
		while ((HAL_GPIO_ReadPin (C4_PORT, C4_PIN))==0);   // wait till the button is pressed
 8000478:	bf00      	nop
 800047a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800047e:	4834      	ldr	r0, [pc, #208]	; (8000550 <read_keypad+0x2f4>)
 8000480:	f000 ff7e 	bl	8001380 <HAL_GPIO_ReadPin>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d0f7      	beq.n	800047a <read_keypad+0x21e>
		return 'C';
 800048a:	2343      	movs	r3, #67	; 0x43
 800048c:	e05c      	b.n	8000548 <read_keypad+0x2ec>
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 800048e:	2201      	movs	r2, #1
 8000490:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000494:	482d      	ldr	r0, [pc, #180]	; (800054c <read_keypad+0x2f0>)
 8000496:	f000 ff8a 	bl	80013ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 800049a:	2201      	movs	r2, #1
 800049c:	2108      	movs	r1, #8
 800049e:	482c      	ldr	r0, [pc, #176]	; (8000550 <read_keypad+0x2f4>)
 80004a0:	f000 ff85 	bl	80013ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 80004a4:	2201      	movs	r2, #1
 80004a6:	2110      	movs	r1, #16
 80004a8:	4829      	ldr	r0, [pc, #164]	; (8000550 <read_keypad+0x2f4>)
 80004aa:	f000 ff80 	bl	80013ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);  // Pull the R4 High
 80004ae:	2200      	movs	r2, #0
 80004b0:	2120      	movs	r1, #32
 80004b2:	4827      	ldr	r0, [pc, #156]	; (8000550 <read_keypad+0x2f4>)
 80004b4:	f000 ff7b 	bl	80013ae <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (C1_PORT, C1_PIN))==0)   // if the Col 1 is low
 80004b8:	2140      	movs	r1, #64	; 0x40
 80004ba:	4825      	ldr	r0, [pc, #148]	; (8000550 <read_keypad+0x2f4>)
 80004bc:	f000 ff60 	bl	8001380 <HAL_GPIO_ReadPin>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d109      	bne.n	80004da <read_keypad+0x27e>
	{
		while ((HAL_GPIO_ReadPin (C1_PORT, C1_PIN))==0);   // wait till the button is pressed
 80004c6:	bf00      	nop
 80004c8:	2140      	movs	r1, #64	; 0x40
 80004ca:	4821      	ldr	r0, [pc, #132]	; (8000550 <read_keypad+0x2f4>)
 80004cc:	f000 ff58 	bl	8001380 <HAL_GPIO_ReadPin>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d0f8      	beq.n	80004c8 <read_keypad+0x26c>
		return '*';
 80004d6:	232a      	movs	r3, #42	; 0x2a
 80004d8:	e036      	b.n	8000548 <read_keypad+0x2ec>
	}

	if ((HAL_GPIO_ReadPin (C2_PORT, C2_PIN))==0)   // if the Col 2 is low
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	481c      	ldr	r0, [pc, #112]	; (8000550 <read_keypad+0x2f4>)
 80004de:	f000 ff4f 	bl	8001380 <HAL_GPIO_ReadPin>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d109      	bne.n	80004fc <read_keypad+0x2a0>
	{
		while ((HAL_GPIO_ReadPin (C2_PORT, C2_PIN))==0);   // wait till the button is pressed
 80004e8:	bf00      	nop
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	4818      	ldr	r0, [pc, #96]	; (8000550 <read_keypad+0x2f4>)
 80004ee:	f000 ff47 	bl	8001380 <HAL_GPIO_ReadPin>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0f8      	beq.n	80004ea <read_keypad+0x28e>
		return '0';
 80004f8:	2330      	movs	r3, #48	; 0x30
 80004fa:	e025      	b.n	8000548 <read_keypad+0x2ec>
	}

	if ((HAL_GPIO_ReadPin (C3_PORT, C3_PIN))==0)   // if the Col 3 is low
 80004fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000500:	4813      	ldr	r0, [pc, #76]	; (8000550 <read_keypad+0x2f4>)
 8000502:	f000 ff3d 	bl	8001380 <HAL_GPIO_ReadPin>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d10a      	bne.n	8000522 <read_keypad+0x2c6>
	{
		while ((HAL_GPIO_ReadPin (C3_PORT, C3_PIN))==0);   // wait till the button is pressed
 800050c:	bf00      	nop
 800050e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000512:	480f      	ldr	r0, [pc, #60]	; (8000550 <read_keypad+0x2f4>)
 8000514:	f000 ff34 	bl	8001380 <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d0f7      	beq.n	800050e <read_keypad+0x2b2>
		return '#';
 800051e:	2323      	movs	r3, #35	; 0x23
 8000520:	e012      	b.n	8000548 <read_keypad+0x2ec>
	}

	if ((HAL_GPIO_ReadPin (C4_PORT, C4_PIN))==0)   // if the Col 4 is low
 8000522:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000526:	480a      	ldr	r0, [pc, #40]	; (8000550 <read_keypad+0x2f4>)
 8000528:	f000 ff2a 	bl	8001380 <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d10a      	bne.n	8000548 <read_keypad+0x2ec>
	{
		while ((HAL_GPIO_ReadPin (C4_PORT, C4_PIN))==0);   // wait till the button is pressed
 8000532:	bf00      	nop
 8000534:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <read_keypad+0x2f4>)
 800053a:	f000 ff21 	bl	8001380 <HAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0f7      	beq.n	8000534 <read_keypad+0x2d8>
		return 'D';
 8000544:	2344      	movs	r3, #68	; 0x44
 8000546:	e7ff      	b.n	8000548 <read_keypad+0x2ec>
	}
}
 8000548:	4618      	mov	r0, r3
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40010800 	.word	0x40010800
 8000550:	40010c00 	.word	0x40010c00

08000554 <getInput>:

char* getInput()
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
	int count = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
	char *input = (char*)malloc(5*sizeof(char));
 800055e:	2005      	movs	r0, #5
 8000560:	f003 fe12 	bl	8004188 <malloc>
 8000564:	4603      	mov	r3, r0
 8000566:	60bb      	str	r3, [r7, #8]

	if (input == NULL) {
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d10d      	bne.n	800058a <getInput+0x36>
	        return NULL;
 800056e:	2300      	movs	r3, #0
 8000570:	e014      	b.n	800059c <getInput+0x48>
	    }

	while (count < 4) {
			char ch = read_keypad();
 8000572:	f7ff fe73 	bl	800025c <read_keypad>
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
			input[count] = ch;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	68ba      	ldr	r2, [r7, #8]
 800057e:	4413      	add	r3, r2
 8000580:	79fa      	ldrb	r2, [r7, #7]
 8000582:	701a      	strb	r2, [r3, #0]
			count++;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	3301      	adds	r3, #1
 8000588:	60fb      	str	r3, [r7, #12]
	while (count < 4) {
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2b03      	cmp	r3, #3
 800058e:	ddf0      	ble.n	8000572 <getInput+0x1e>
		}
	input[count] = '\0';
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	4413      	add	r3, r2
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]

	return input;
 800059a:	68bb      	ldr	r3, [r7, #8]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fbfb 	bl	8000da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f83b 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f90d 	bl	80007d0 <MX_GPIO_Init>
  MX_SPI2_Init();
 80005b6:	f000 f8ab 	bl	8000710 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80005ba:	f000 f8df 	bl	800077c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80005be:	f000 f879 	bl	80006b4 <MX_I2C2_Init>
  uint8_t status;
  uint8_t str[MAX_LEN]; // Max_LEN = 16
  uint8_t sNum[5];

  /* USER CODE END 2 */
  MFRC522_Init();
 80005c2:	f000 fa2d 	bl	8000a20 <MFRC522_Init>
  lcd_init();
 80005c6:	f7ff fe0b 	bl	80001e0 <lcd_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of rfid */
  osThreadDef(rfid, StartRFID, osPriorityIdle, 0, 256);
 80005ca:	4b13      	ldr	r3, [pc, #76]	; (8000618 <main+0x74>)
 80005cc:	f107 041c 	add.w	r4, r7, #28
 80005d0:	461d      	mov	r5, r3
 80005d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rfidHandle = osThreadCreate(osThread(rfid), NULL);
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fb8b 	bl	8002d00 <osThreadCreate>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a0b      	ldr	r2, [pc, #44]	; (800061c <main+0x78>)
 80005ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of keyboard */
  osThreadDef(keyboard, StartTask04, osPriorityIdle, 0, 128);
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <main+0x7c>)
 80005f2:	463c      	mov	r4, r7
 80005f4:	461d      	mov	r5, r3
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  keyboardHandle = osThreadCreate(osThread(keyboard), NULL);
 8000602:	463b      	mov	r3, r7
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f002 fb7a 	bl	8002d00 <osThreadCreate>
 800060c:	4603      	mov	r3, r0
 800060e:	4a05      	ldr	r2, [pc, #20]	; (8000624 <main+0x80>)
 8000610:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000612:	f002 fb6e 	bl	8002cf2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000616:	e7fe      	b.n	8000616 <main+0x72>
 8000618:	080044a8 	.word	0x080044a8
 800061c:	20000438 	.word	0x20000438
 8000620:	080044c4 	.word	0x080044c4
 8000624:	2000043c 	.word	0x2000043c

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b090      	sub	sp, #64	; 0x40
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0318 	add.w	r3, r7, #24
 8000632:	2228      	movs	r2, #40	; 0x28
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fdb6 	bl	80041a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064a:	2301      	movs	r3, #1
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000652:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000666:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0318 	add.w	r3, r7, #24
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fb51 	bl	8001d18 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800067c:	f000 f935 	bl	80008ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2102      	movs	r1, #2
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fdbe 	bl	800221c <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006a6:	f000 f920 	bl	80008ea <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3740      	adds	r7, #64	; 0x40
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_I2C2_Init+0x50>)
 80006ba:	4a13      	ldr	r2, [pc, #76]	; (8000708 <MX_I2C2_Init+0x54>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_I2C2_Init+0x50>)
 80006c0:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_I2C2_Init+0x58>)
 80006c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_I2C2_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_I2C2_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_I2C2_Init+0x50>)
 80006d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <MX_I2C2_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_I2C2_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_I2C2_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_I2C2_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_I2C2_Init+0x50>)
 80006f2:	f000 fe75 	bl	80013e0 <HAL_I2C_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006fc:	f000 f8f5 	bl	80008ea <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000344 	.word	0x20000344
 8000708:	40005800 	.word	0x40005800
 800070c:	000186a0 	.word	0x000186a0

08000710 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_SPI2_Init+0x64>)
 8000716:	4a18      	ldr	r2, [pc, #96]	; (8000778 <MX_SPI2_Init+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_SPI2_Init+0x64>)
 800071c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000720:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_SPI2_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_SPI2_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_SPI2_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_SPI2_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_SPI2_Init+0x64>)
 800073c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000740:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_SPI2_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_SPI2_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_SPI2_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_SPI2_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_SPI2_Init+0x64>)
 800075c:	220a      	movs	r2, #10
 800075e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_SPI2_Init+0x64>)
 8000762:	f001 fee9 	bl	8002538 <HAL_SPI_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800076c:	f000 f8bd 	bl	80008ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000398 	.word	0x20000398
 8000778:	40003800 	.word	0x40003800

0800077c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000782:	4a12      	ldr	r2, [pc, #72]	; (80007cc <MX_USART2_UART_Init+0x50>)
 8000784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007b4:	f002 f9a7 	bl	8002b06 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007be:	f000 f894 	bl	80008ea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200003f0 	.word	0x200003f0
 80007cc:	40004400 	.word	0x40004400

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e4:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <MX_GPIO_Init+0xd4>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a2e      	ldr	r2, [pc, #184]	; (80008a4 <MX_GPIO_Init+0xd4>)
 80007ea:	f043 0320 	orr.w	r3, r3, #32
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <MX_GPIO_Init+0xd4>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f003 0320 	and.w	r3, r3, #32
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fc:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <MX_GPIO_Init+0xd4>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a28      	ldr	r2, [pc, #160]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000802:	f043 0304 	orr.w	r3, r3, #4
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <MX_GPIO_Init+0xd4>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f003 0304 	and.w	r3, r3, #4
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000814:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a22      	ldr	r2, [pc, #136]	; (80008a4 <MX_GPIO_Init+0xd4>)
 800081a:	f043 0308 	orr.w	r3, r3, #8
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0308 	and.w	r3, r3, #8
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f241 0138 	movw	r1, #4152	; 0x1038
 8000832:	481d      	ldr	r0, [pc, #116]	; (80008a8 <MX_GPIO_Init+0xd8>)
 8000834:	f000 fdbb 	bl	80013ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 800083e:	481b      	ldr	r0, [pc, #108]	; (80008ac <MX_GPIO_Init+0xdc>)
 8000840:	f000 fdb5 	bl	80013ae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000844:	f241 0338 	movw	r3, #4152	; 0x1038
 8000848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2302      	movs	r3, #2
 8000854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	f107 0310 	add.w	r3, r7, #16
 800085a:	4619      	mov	r1, r3
 800085c:	4812      	ldr	r0, [pc, #72]	; (80008a8 <MX_GPIO_Init+0xd8>)
 800085e:	f000 fc0b 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8000862:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2302      	movs	r3, #2
 8000872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	4619      	mov	r1, r3
 800087a:	480c      	ldr	r0, [pc, #48]	; (80008ac <MX_GPIO_Init+0xdc>)
 800087c:	f000 fbfc 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000880:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	4619      	mov	r1, r3
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_GPIO_Init+0xd8>)
 8000896:	f000 fbef 	bl	8001078 <HAL_GPIO_Init>

}
 800089a:	bf00      	nop
 800089c:	3720      	adds	r7, #32
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40010c00 	.word	0x40010c00
 80008ac:	40010800 	.word	0x40010800

080008b0 <StartRFID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRFID */
void StartRFID(void const * argument)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRFID */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008b8:	2001      	movs	r0, #1
 80008ba:	f002 fa6d 	bl	8002d98 <osDelay>
 80008be:	e7fb      	b.n	80008b8 <StartRFID+0x8>

080008c0 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	; 0x30
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
char inputBuffer[32];
uint8_t inputLength = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* Infinite loop */
  for(;;)
  {
	char* input = getInput();
 80008ce:	f7ff fe41 	bl	8000554 <getInput>
 80008d2:	62b8      	str	r0, [r7, #40]	; 0x28
	if (input != NULL) {
 80008d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d002      	beq.n	80008e0 <StartTask04+0x20>

		//update1(input , 1);		// Đang chờ sửa hàm update1

		free(input);
 80008da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80008dc:	f003 fc5c 	bl	8004198 <free>
	}
    osDelay(5000);
 80008e0:	f241 3088 	movw	r0, #5000	; 0x1388
 80008e4:	f002 fa58 	bl	8002d98 <osDelay>
  {
 80008e8:	e7f1      	b.n	80008ce <StartTask04+0xe>

080008ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ee:	b672      	cpsid	i
}
 80008f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <Error_Handler+0x8>

080008f4 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af02      	add	r7, sp, #8
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 80008fe:	f107 020f 	add.w	r2, r7, #15
 8000902:	1df9      	adds	r1, r7, #7
 8000904:	2364      	movs	r3, #100	; 0x64
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	2301      	movs	r3, #1
 800090a:	4804      	ldr	r0, [pc, #16]	; (800091c <RC522_SPI_Transfer+0x28>)
 800090c:	f001 fe98 	bl	8002640 <HAL_SPI_TransmitReceive>

	return rx_data;
 8000910:	7bfb      	ldrb	r3, [r7, #15]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000398 	.word	0x20000398

08000920 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	460a      	mov	r2, r1
 800092a:	71fb      	strb	r3, [r7, #7]
 800092c:	4613      	mov	r3, r2
 800092e:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000936:	480d      	ldr	r0, [pc, #52]	; (800096c <Write_MFRC522+0x4c>)
 8000938:	f000 fd39 	bl	80013ae <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	b2db      	uxtb	r3, r3
 8000942:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000946:	b2db      	uxtb	r3, r3
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ffd3 	bl	80008f4 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 800094e:	79bb      	ldrb	r3, [r7, #6]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ffcf 	bl	80008f4 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800095c:	4803      	ldr	r0, [pc, #12]	; (800096c <Write_MFRC522+0x4c>)
 800095e:	f000 fd26 	bl	80013ae <HAL_GPIO_WritePin>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40010c00 	.word	0x40010c00

08000970 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000980:	480f      	ldr	r0, [pc, #60]	; (80009c0 <Read_MFRC522+0x50>)
 8000982:	f000 fd14 	bl	80013ae <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	b25b      	sxtb	r3, r3
 800098c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000990:	b25b      	sxtb	r3, r3
 8000992:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000996:	b25b      	sxtb	r3, r3
 8000998:	b2db      	uxtb	r3, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ffaa 	bl	80008f4 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff ffa7 	bl	80008f4 <RC522_SPI_Transfer>
 80009a6:	4603      	mov	r3, r0
 80009a8:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b0:	4803      	ldr	r0, [pc, #12]	; (80009c0 <Read_MFRC522+0x50>)
 80009b2:	f000 fcfc 	bl	80013ae <HAL_GPIO_WritePin>

	return val;
 80009b6:	7bfb      	ldrb	r3, [r7, #15]

}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40010c00 	.word	0x40010c00

080009c4 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	460a      	mov	r2, r1
 80009ce:	71fb      	strb	r3, [r7, #7]
 80009d0:	4613      	mov	r3, r2
 80009d2:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ffca 	bl	8000970 <Read_MFRC522>
 80009dc:	4603      	mov	r3, r0
 80009de:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80009e0:	7bfa      	ldrb	r2, [r7, #15]
 80009e2:	79bb      	ldrb	r3, [r7, #6]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	4611      	mov	r1, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff97 	bl	8000920 <Write_MFRC522>
}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 80009fe:	2014      	movs	r0, #20
 8000a00:	f7ff ffb6 	bl	8000970 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000a04:	2103      	movs	r1, #3
 8000a06:	2014      	movs	r0, #20
 8000a08:	f7ff ffdc 	bl	80009c4 <SetBitMask>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000a14:	210f      	movs	r1, #15
 8000a16:	2001      	movs	r0, #1
 8000a18:	f7ff ff82 	bl	8000920 <Write_MFRC522>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2a:	4813      	ldr	r0, [pc, #76]	; (8000a78 <MFRC522_Init+0x58>)
 8000a2c:	f000 fcbf 	bl	80013ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a36:	4811      	ldr	r0, [pc, #68]	; (8000a7c <MFRC522_Init+0x5c>)
 8000a38:	f000 fcb9 	bl	80013ae <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000a3c:	f7ff ffe8 	bl	8000a10 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000a40:	218d      	movs	r1, #141	; 0x8d
 8000a42:	202a      	movs	r0, #42	; 0x2a
 8000a44:	f7ff ff6c 	bl	8000920 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000a48:	213e      	movs	r1, #62	; 0x3e
 8000a4a:	202b      	movs	r0, #43	; 0x2b
 8000a4c:	f7ff ff68 	bl	8000920 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8000a50:	211e      	movs	r1, #30
 8000a52:	202d      	movs	r0, #45	; 0x2d
 8000a54:	f7ff ff64 	bl	8000920 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	202c      	movs	r0, #44	; 0x2c
 8000a5c:	f7ff ff60 	bl	8000920 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	2015      	movs	r0, #21
 8000a64:	f7ff ff5c 	bl	8000920 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000a68:	213d      	movs	r1, #61	; 0x3d
 8000a6a:	2011      	movs	r0, #17
 8000a6c:	f7ff ff58 	bl	8000920 <Write_MFRC522>

	AntennaOn();
 8000a70:	f7ff ffc3 	bl	80009fa <AntennaOn>
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40010c00 	.word	0x40010c00
 8000a7c:	40010800 	.word	0x40010800

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <HAL_MspInit+0x68>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <HAL_MspInit+0x68>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6193      	str	r3, [r2, #24]
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <HAL_MspInit+0x68>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_MspInit+0x68>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <HAL_MspInit+0x68>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	61d3      	str	r3, [r2, #28]
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <HAL_MspInit+0x68>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	210f      	movs	r1, #15
 8000aba:	f06f 0001 	mvn.w	r0, #1
 8000abe:	f000 fab2 	bl	8001026 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <HAL_MspInit+0x6c>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_MspInit+0x6c>)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010000 	.word	0x40010000

08000af0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a16      	ldr	r2, [pc, #88]	; (8000b64 <HAL_I2C_MspInit+0x74>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d124      	bne.n	8000b5a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_I2C_MspInit+0x78>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <HAL_I2C_MspInit+0x78>)
 8000b16:	f043 0308 	orr.w	r3, r3, #8
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_I2C_MspInit+0x78>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0308 	and.w	r3, r3, #8
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2e:	2312      	movs	r3, #18
 8000b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <HAL_I2C_MspInit+0x7c>)
 8000b3e:	f000 fa9b 	bl	8001078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_I2C_MspInit+0x78>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_I2C_MspInit+0x78>)
 8000b48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b4c:	61d3      	str	r3, [r2, #28]
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_I2C_MspInit+0x78>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3720      	adds	r7, #32
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40005800 	.word	0x40005800
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010c00 	.word	0x40010c00

08000b70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a1c      	ldr	r2, [pc, #112]	; (8000bfc <HAL_SPI_MspInit+0x8c>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d131      	bne.n	8000bf4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <HAL_SPI_MspInit+0x90>)
 8000b92:	69db      	ldr	r3, [r3, #28]
 8000b94:	4a1a      	ldr	r2, [pc, #104]	; (8000c00 <HAL_SPI_MspInit+0x90>)
 8000b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9a:	61d3      	str	r3, [r2, #28]
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <HAL_SPI_MspInit+0x90>)
 8000b9e:	69db      	ldr	r3, [r3, #28]
 8000ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <HAL_SPI_MspInit+0x90>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <HAL_SPI_MspInit+0x90>)
 8000bae:	f043 0308 	orr.w	r3, r3, #8
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <HAL_SPI_MspInit+0x90>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0308 	and.w	r3, r3, #8
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000bc0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000bc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480b      	ldr	r0, [pc, #44]	; (8000c04 <HAL_SPI_MspInit+0x94>)
 8000bd6:	f000 fa4f 	bl	8001078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000bda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	4619      	mov	r1, r3
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <HAL_SPI_MspInit+0x94>)
 8000bf0:	f000 fa42 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000bf4:	bf00      	nop
 8000bf6:	3720      	adds	r7, #32
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40003800 	.word	0x40003800
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010c00 	.word	0x40010c00

08000c08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a1b      	ldr	r2, [pc, #108]	; (8000c90 <HAL_UART_MspInit+0x88>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d12f      	bne.n	8000c88 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c28:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <HAL_UART_MspInit+0x8c>)
 8000c2a:	69db      	ldr	r3, [r3, #28]
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <HAL_UART_MspInit+0x8c>)
 8000c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c32:	61d3      	str	r3, [r2, #28]
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <HAL_UART_MspInit+0x8c>)
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <HAL_UART_MspInit+0x8c>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a13      	ldr	r2, [pc, #76]	; (8000c94 <HAL_UART_MspInit+0x8c>)
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	6193      	str	r3, [r2, #24]
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_UART_MspInit+0x8c>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480b      	ldr	r0, [pc, #44]	; (8000c98 <HAL_UART_MspInit+0x90>)
 8000c6c:	f000 fa04 	bl	8001078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c70:	2308      	movs	r3, #8
 8000c72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	4619      	mov	r1, r3
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <HAL_UART_MspInit+0x90>)
 8000c84:	f000 f9f8 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c88:	bf00      	nop
 8000c8a:	3720      	adds	r7, #32
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40004400 	.word	0x40004400
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40010800 	.word	0x40010800

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cca:	f000 f8b1 	bl	8000e30 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cce:	f002 fe0d 	bl	80038ec <xTaskGetSchedulerState>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d001      	beq.n	8000cdc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000cd8:	f002 fffe 	bl	8003cd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f003 fa0e 	bl	8004130 <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20005000 	.word	0x20005000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	20000440 	.word	0x20000440
 8000d48:	200011b0 	.word	0x200011b0

08000d4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d58:	f7ff fff8 	bl	8000d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d5c:	480b      	ldr	r0, [pc, #44]	; (8000d8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d5e:	490c      	ldr	r1, [pc, #48]	; (8000d90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d60:	4a0c      	ldr	r2, [pc, #48]	; (8000d94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d74:	4c09      	ldr	r4, [pc, #36]	; (8000d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d82:	f003 f9db 	bl	800413c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d86:	f7ff fc0d 	bl	80005a4 <main>
  bx lr
 8000d8a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d90:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d94:	08004658 	.word	0x08004658
  ldr r2, =_sbss
 8000d98:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d9c:	200011ac 	.word	0x200011ac

08000da0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da0:	e7fe      	b.n	8000da0 <ADC1_2_IRQHandler>
	...

08000da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_Init+0x28>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_Init+0x28>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f92b 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	200f      	movs	r0, #15
 8000dbc:	f000 f808 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fe5e 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40022000 	.word	0x40022000

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_InitTick+0x54>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x58>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f935 	bl	800105e <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f000 f90b 	bl	8001026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_InitTick+0x5c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000004 	.word	0x20000004

08000e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_IncTick+0x1c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x20>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a03      	ldr	r2, [pc, #12]	; (8000e50 <HAL_IncTick+0x20>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000444 	.word	0x20000444

08000e54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <HAL_GetTick+0x10>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	20000444 	.word	0x20000444

08000e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff fff0 	bl	8000e54 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e80:	d005      	beq.n	8000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_Delay+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e8e:	bf00      	nop
 8000e90:	f7ff ffe0 	bl	8000e54 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d8f7      	bhi.n	8000e90 <HAL_Delay+0x28>
  {
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	f7ff ff90 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff49 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff5e 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff90 	bl	8000f68 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5f 	bl	8000f14 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ffb0 	bl	8000fcc <SysTick_Config>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b08b      	sub	sp, #44	; 0x2c
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108a:	e169      	b.n	8001360 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800108c:	2201      	movs	r2, #1
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	f040 8158 	bne.w	800135a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	4a9a      	ldr	r2, [pc, #616]	; (8001318 <HAL_GPIO_Init+0x2a0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d05e      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010b4:	4a98      	ldr	r2, [pc, #608]	; (8001318 <HAL_GPIO_Init+0x2a0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d875      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010ba:	4a98      	ldr	r2, [pc, #608]	; (800131c <HAL_GPIO_Init+0x2a4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d058      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010c0:	4a96      	ldr	r2, [pc, #600]	; (800131c <HAL_GPIO_Init+0x2a4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d86f      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010c6:	4a96      	ldr	r2, [pc, #600]	; (8001320 <HAL_GPIO_Init+0x2a8>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d052      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010cc:	4a94      	ldr	r2, [pc, #592]	; (8001320 <HAL_GPIO_Init+0x2a8>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d869      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010d2:	4a94      	ldr	r2, [pc, #592]	; (8001324 <HAL_GPIO_Init+0x2ac>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d04c      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010d8:	4a92      	ldr	r2, [pc, #584]	; (8001324 <HAL_GPIO_Init+0x2ac>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d863      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010de:	4a92      	ldr	r2, [pc, #584]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d046      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010e4:	4a90      	ldr	r2, [pc, #576]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d85d      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010ea:	2b12      	cmp	r3, #18
 80010ec:	d82a      	bhi.n	8001144 <HAL_GPIO_Init+0xcc>
 80010ee:	2b12      	cmp	r3, #18
 80010f0:	d859      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010f2:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <HAL_GPIO_Init+0x80>)
 80010f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f8:	08001173 	.word	0x08001173
 80010fc:	0800114d 	.word	0x0800114d
 8001100:	0800115f 	.word	0x0800115f
 8001104:	080011a1 	.word	0x080011a1
 8001108:	080011a7 	.word	0x080011a7
 800110c:	080011a7 	.word	0x080011a7
 8001110:	080011a7 	.word	0x080011a7
 8001114:	080011a7 	.word	0x080011a7
 8001118:	080011a7 	.word	0x080011a7
 800111c:	080011a7 	.word	0x080011a7
 8001120:	080011a7 	.word	0x080011a7
 8001124:	080011a7 	.word	0x080011a7
 8001128:	080011a7 	.word	0x080011a7
 800112c:	080011a7 	.word	0x080011a7
 8001130:	080011a7 	.word	0x080011a7
 8001134:	080011a7 	.word	0x080011a7
 8001138:	080011a7 	.word	0x080011a7
 800113c:	08001155 	.word	0x08001155
 8001140:	08001169 	.word	0x08001169
 8001144:	4a79      	ldr	r2, [pc, #484]	; (800132c <HAL_GPIO_Init+0x2b4>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d013      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800114a:	e02c      	b.n	80011a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	623b      	str	r3, [r7, #32]
          break;
 8001152:	e029      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	3304      	adds	r3, #4
 800115a:	623b      	str	r3, [r7, #32]
          break;
 800115c:	e024      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	3308      	adds	r3, #8
 8001164:	623b      	str	r3, [r7, #32]
          break;
 8001166:	e01f      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	330c      	adds	r3, #12
 800116e:	623b      	str	r3, [r7, #32]
          break;
 8001170:	e01a      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d102      	bne.n	8001180 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800117a:	2304      	movs	r3, #4
 800117c:	623b      	str	r3, [r7, #32]
          break;
 800117e:	e013      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d105      	bne.n	8001194 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001188:	2308      	movs	r3, #8
 800118a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	611a      	str	r2, [r3, #16]
          break;
 8001192:	e009      	b.n	80011a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001194:	2308      	movs	r3, #8
 8001196:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	615a      	str	r2, [r3, #20]
          break;
 800119e:	e003      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
          break;
 80011a4:	e000      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          break;
 80011a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	2bff      	cmp	r3, #255	; 0xff
 80011ac:	d801      	bhi.n	80011b2 <HAL_GPIO_Init+0x13a>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	e001      	b.n	80011b6 <HAL_GPIO_Init+0x13e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3304      	adds	r3, #4
 80011b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	2bff      	cmp	r3, #255	; 0xff
 80011bc:	d802      	bhi.n	80011c4 <HAL_GPIO_Init+0x14c>
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	e002      	b.n	80011ca <HAL_GPIO_Init+0x152>
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c6:	3b08      	subs	r3, #8
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	210f      	movs	r1, #15
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	401a      	ands	r2, r3
 80011dc:	6a39      	ldr	r1, [r7, #32]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	fa01 f303 	lsl.w	r3, r1, r3
 80011e4:	431a      	orrs	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 80b1 	beq.w	800135a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011f8:	4b4d      	ldr	r3, [pc, #308]	; (8001330 <HAL_GPIO_Init+0x2b8>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a4c      	ldr	r2, [pc, #304]	; (8001330 <HAL_GPIO_Init+0x2b8>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b4a      	ldr	r3, [pc, #296]	; (8001330 <HAL_GPIO_Init+0x2b8>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001210:	4a48      	ldr	r2, [pc, #288]	; (8001334 <HAL_GPIO_Init+0x2bc>)
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	220f      	movs	r2, #15
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	4013      	ands	r3, r2
 8001232:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a40      	ldr	r2, [pc, #256]	; (8001338 <HAL_GPIO_Init+0x2c0>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d013      	beq.n	8001264 <HAL_GPIO_Init+0x1ec>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a3f      	ldr	r2, [pc, #252]	; (800133c <HAL_GPIO_Init+0x2c4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d00d      	beq.n	8001260 <HAL_GPIO_Init+0x1e8>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a3e      	ldr	r2, [pc, #248]	; (8001340 <HAL_GPIO_Init+0x2c8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d007      	beq.n	800125c <HAL_GPIO_Init+0x1e4>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a3d      	ldr	r2, [pc, #244]	; (8001344 <HAL_GPIO_Init+0x2cc>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d101      	bne.n	8001258 <HAL_GPIO_Init+0x1e0>
 8001254:	2303      	movs	r3, #3
 8001256:	e006      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 8001258:	2304      	movs	r3, #4
 800125a:	e004      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 800125c:	2302      	movs	r3, #2
 800125e:	e002      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 8001264:	2300      	movs	r3, #0
 8001266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001268:	f002 0203 	and.w	r2, r2, #3
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	4093      	lsls	r3, r2
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001276:	492f      	ldr	r1, [pc, #188]	; (8001334 <HAL_GPIO_Init+0x2bc>)
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	3302      	adds	r3, #2
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	492c      	ldr	r1, [pc, #176]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	608b      	str	r3, [r1, #8]
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	4928      	ldr	r1, [pc, #160]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012ba:	68da      	ldr	r2, [r3, #12]
 80012bc:	4922      	ldr	r1, [pc, #136]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	60cb      	str	r3, [r1, #12]
 80012c4:	e006      	b.n	80012d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	491e      	ldr	r1, [pc, #120]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	4918      	ldr	r1, [pc, #96]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	4914      	ldr	r1, [pc, #80]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012f8:	4013      	ands	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d021      	beq.n	800134c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	490e      	ldr	r1, [pc, #56]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	600b      	str	r3, [r1, #0]
 8001314:	e021      	b.n	800135a <HAL_GPIO_Init+0x2e2>
 8001316:	bf00      	nop
 8001318:	10320000 	.word	0x10320000
 800131c:	10310000 	.word	0x10310000
 8001320:	10220000 	.word	0x10220000
 8001324:	10210000 	.word	0x10210000
 8001328:	10120000 	.word	0x10120000
 800132c:	10110000 	.word	0x10110000
 8001330:	40021000 	.word	0x40021000
 8001334:	40010000 	.word	0x40010000
 8001338:	40010800 	.word	0x40010800
 800133c:	40010c00 	.word	0x40010c00
 8001340:	40011000 	.word	0x40011000
 8001344:	40011400 	.word	0x40011400
 8001348:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_GPIO_Init+0x304>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	43db      	mvns	r3, r3
 8001354:	4909      	ldr	r1, [pc, #36]	; (800137c <HAL_GPIO_Init+0x304>)
 8001356:	4013      	ands	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	3301      	adds	r3, #1
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	fa22 f303 	lsr.w	r3, r2, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	f47f ae8e 	bne.w	800108c <HAL_GPIO_Init+0x14>
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	372c      	adds	r7, #44	; 0x2c
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	40010400 	.word	0x40010400

08001380 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	4013      	ands	r3, r2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001398:	2301      	movs	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	e001      	b.n	80013a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	460b      	mov	r3, r1
 80013b8:	807b      	strh	r3, [r7, #2]
 80013ba:	4613      	mov	r3, r2
 80013bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013be:	787b      	ldrb	r3, [r7, #1]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c4:	887a      	ldrh	r2, [r7, #2]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013ca:	e003      	b.n	80013d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013cc:	887b      	ldrh	r3, [r7, #2]
 80013ce:	041a      	lsls	r2, r3, #16
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	611a      	str	r2, [r3, #16]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
	...

080013e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e12b      	b.n	800164a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d106      	bne.n	800140c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fb72 	bl	8000af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2224      	movs	r2, #36	; 0x24
 8001410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0201 	bic.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001432:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001442:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001444:	f001 f832 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 8001448:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4a81      	ldr	r2, [pc, #516]	; (8001654 <HAL_I2C_Init+0x274>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d807      	bhi.n	8001464 <HAL_I2C_Init+0x84>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4a80      	ldr	r2, [pc, #512]	; (8001658 <HAL_I2C_Init+0x278>)
 8001458:	4293      	cmp	r3, r2
 800145a:	bf94      	ite	ls
 800145c:	2301      	movls	r3, #1
 800145e:	2300      	movhi	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	e006      	b.n	8001472 <HAL_I2C_Init+0x92>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4a7d      	ldr	r2, [pc, #500]	; (800165c <HAL_I2C_Init+0x27c>)
 8001468:	4293      	cmp	r3, r2
 800146a:	bf94      	ite	ls
 800146c:	2301      	movls	r3, #1
 800146e:	2300      	movhi	r3, #0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e0e7      	b.n	800164a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4a78      	ldr	r2, [pc, #480]	; (8001660 <HAL_I2C_Init+0x280>)
 800147e:	fba2 2303 	umull	r2, r3, r2, r3
 8001482:	0c9b      	lsrs	r3, r3, #18
 8001484:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	430a      	orrs	r2, r1
 8001498:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	4a6a      	ldr	r2, [pc, #424]	; (8001654 <HAL_I2C_Init+0x274>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d802      	bhi.n	80014b4 <HAL_I2C_Init+0xd4>
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	3301      	adds	r3, #1
 80014b2:	e009      	b.n	80014c8 <HAL_I2C_Init+0xe8>
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014ba:	fb02 f303 	mul.w	r3, r2, r3
 80014be:	4a69      	ldr	r2, [pc, #420]	; (8001664 <HAL_I2C_Init+0x284>)
 80014c0:	fba2 2303 	umull	r2, r3, r2, r3
 80014c4:	099b      	lsrs	r3, r3, #6
 80014c6:	3301      	adds	r3, #1
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	430b      	orrs	r3, r1
 80014ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	495c      	ldr	r1, [pc, #368]	; (8001654 <HAL_I2C_Init+0x274>)
 80014e4:	428b      	cmp	r3, r1
 80014e6:	d819      	bhi.n	800151c <HAL_I2C_Init+0x13c>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1e59      	subs	r1, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80014f6:	1c59      	adds	r1, r3, #1
 80014f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014fc:	400b      	ands	r3, r1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00a      	beq.n	8001518 <HAL_I2C_Init+0x138>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1e59      	subs	r1, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001510:	3301      	adds	r3, #1
 8001512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001516:	e051      	b.n	80015bc <HAL_I2C_Init+0x1dc>
 8001518:	2304      	movs	r3, #4
 800151a:	e04f      	b.n	80015bc <HAL_I2C_Init+0x1dc>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d111      	bne.n	8001548 <HAL_I2C_Init+0x168>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	1e58      	subs	r0, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6859      	ldr	r1, [r3, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	440b      	add	r3, r1
 8001532:	fbb0 f3f3 	udiv	r3, r0, r3
 8001536:	3301      	adds	r3, #1
 8001538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800153c:	2b00      	cmp	r3, #0
 800153e:	bf0c      	ite	eq
 8001540:	2301      	moveq	r3, #1
 8001542:	2300      	movne	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	e012      	b.n	800156e <HAL_I2C_Init+0x18e>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1e58      	subs	r0, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6859      	ldr	r1, [r3, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	0099      	lsls	r1, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	fbb0 f3f3 	udiv	r3, r0, r3
 800155e:	3301      	adds	r3, #1
 8001560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001564:	2b00      	cmp	r3, #0
 8001566:	bf0c      	ite	eq
 8001568:	2301      	moveq	r3, #1
 800156a:	2300      	movne	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_I2C_Init+0x196>
 8001572:	2301      	movs	r3, #1
 8001574:	e022      	b.n	80015bc <HAL_I2C_Init+0x1dc>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10e      	bne.n	800159c <HAL_I2C_Init+0x1bc>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1e58      	subs	r0, r3, #1
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6859      	ldr	r1, [r3, #4]
 8001586:	460b      	mov	r3, r1
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	440b      	add	r3, r1
 800158c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001590:	3301      	adds	r3, #1
 8001592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800159a:	e00f      	b.n	80015bc <HAL_I2C_Init+0x1dc>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1e58      	subs	r0, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6859      	ldr	r1, [r3, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	0099      	lsls	r1, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b2:	3301      	adds	r3, #1
 80015b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	6809      	ldr	r1, [r1, #0]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69da      	ldr	r2, [r3, #28]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6911      	ldr	r1, [r2, #16]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68d2      	ldr	r2, [r2, #12]
 80015f6:	4311      	orrs	r1, r2
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	430b      	orrs	r3, r1
 80015fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695a      	ldr	r2, [r3, #20]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0201 	orr.w	r2, r2, #1
 800162a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2220      	movs	r2, #32
 8001636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	000186a0 	.word	0x000186a0
 8001658:	001e847f 	.word	0x001e847f
 800165c:	003d08ff 	.word	0x003d08ff
 8001660:	431bde83 	.word	0x431bde83
 8001664:	10624dd3 	.word	0x10624dd3

08001668 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af02      	add	r7, sp, #8
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	461a      	mov	r2, r3
 8001674:	460b      	mov	r3, r1
 8001676:	817b      	strh	r3, [r7, #10]
 8001678:	4613      	mov	r3, r2
 800167a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800167c:	f7ff fbea 	bl	8000e54 <HAL_GetTick>
 8001680:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b20      	cmp	r3, #32
 800168c:	f040 80e0 	bne.w	8001850 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2319      	movs	r3, #25
 8001696:	2201      	movs	r2, #1
 8001698:	4970      	ldr	r1, [pc, #448]	; (800185c <HAL_I2C_Master_Transmit+0x1f4>)
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f000 f964 	bl	8001968 <I2C_WaitOnFlagUntilTimeout>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80016a6:	2302      	movs	r3, #2
 80016a8:	e0d3      	b.n	8001852 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <HAL_I2C_Master_Transmit+0x50>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e0cc      	b.n	8001852 <HAL_I2C_Master_Transmit+0x1ea>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d007      	beq.n	80016de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f042 0201 	orr.w	r2, r2, #1
 80016dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2221      	movs	r2, #33	; 0x21
 80016f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2210      	movs	r2, #16
 80016fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	893a      	ldrh	r2, [r7, #8]
 800170e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001714:	b29a      	uxth	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4a50      	ldr	r2, [pc, #320]	; (8001860 <HAL_I2C_Master_Transmit+0x1f8>)
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001720:	8979      	ldrh	r1, [r7, #10]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	6a3a      	ldr	r2, [r7, #32]
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f000 f89c 	bl	8001864 <I2C_MasterRequestWrite>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e08d      	b.n	8001852 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800174c:	e066      	b.n	800181c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	6a39      	ldr	r1, [r7, #32]
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f000 fa22 	bl	8001b9c <I2C_WaitOnTXEFlagUntilTimeout>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00d      	beq.n	800177a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	2b04      	cmp	r3, #4
 8001764:	d107      	bne.n	8001776 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001774:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e06b      	b.n	8001852 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	781a      	ldrb	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001794:	b29b      	uxth	r3, r3
 8001796:	3b01      	subs	r3, #1
 8001798:	b29a      	uxth	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a2:	3b01      	subs	r3, #1
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d11b      	bne.n	80017f0 <HAL_I2C_Master_Transmit+0x188>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d017      	beq.n	80017f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	781a      	ldrb	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017da:	b29b      	uxth	r3, r3
 80017dc:	3b01      	subs	r3, #1
 80017de:	b29a      	uxth	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	6a39      	ldr	r1, [r7, #32]
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f000 fa19 	bl	8001c2c <I2C_WaitOnBTFFlagUntilTimeout>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00d      	beq.n	800181c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	2b04      	cmp	r3, #4
 8001806:	d107      	bne.n	8001818 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001816:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e01a      	b.n	8001852 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001820:	2b00      	cmp	r3, #0
 8001822:	d194      	bne.n	800174e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2220      	movs	r2, #32
 8001838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	e000      	b.n	8001852 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001850:	2302      	movs	r3, #2
  }
}
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	00100002 	.word	0x00100002
 8001860:	ffff0000 	.word	0xffff0000

08001864 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af02      	add	r7, sp, #8
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	460b      	mov	r3, r1
 8001872:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2b08      	cmp	r3, #8
 800187e:	d006      	beq.n	800188e <I2C_MasterRequestWrite+0x2a>
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d003      	beq.n	800188e <I2C_MasterRequestWrite+0x2a>
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800188c:	d108      	bne.n	80018a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	e00b      	b.n	80018b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	2b12      	cmp	r3, #18
 80018a6:	d107      	bne.n	80018b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 f84f 	bl	8001968 <I2C_WaitOnFlagUntilTimeout>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00d      	beq.n	80018ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018de:	d103      	bne.n	80018e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e035      	b.n	8001958 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018f4:	d108      	bne.n	8001908 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018f6:	897b      	ldrh	r3, [r7, #10]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	461a      	mov	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001904:	611a      	str	r2, [r3, #16]
 8001906:	e01b      	b.n	8001940 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001908:	897b      	ldrh	r3, [r7, #10]
 800190a:	11db      	asrs	r3, r3, #7
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f003 0306 	and.w	r3, r3, #6
 8001912:	b2db      	uxtb	r3, r3
 8001914:	f063 030f 	orn	r3, r3, #15
 8001918:	b2da      	uxtb	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	490e      	ldr	r1, [pc, #56]	; (8001960 <I2C_MasterRequestWrite+0xfc>)
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f898 	bl	8001a5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e010      	b.n	8001958 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001936:	897b      	ldrh	r3, [r7, #10]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <I2C_MasterRequestWrite+0x100>)
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f888 	bl	8001a5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	00010008 	.word	0x00010008
 8001964:	00010002 	.word	0x00010002

08001968 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	4613      	mov	r3, r2
 8001976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001978:	e048      	b.n	8001a0c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001980:	d044      	beq.n	8001a0c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001982:	f7ff fa67 	bl	8000e54 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d302      	bcc.n	8001998 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d139      	bne.n	8001a0c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	0c1b      	lsrs	r3, r3, #16
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d10d      	bne.n	80019be <I2C_WaitOnFlagUntilTimeout+0x56>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	43da      	mvns	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	4013      	ands	r3, r2
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf0c      	ite	eq
 80019b4:	2301      	moveq	r3, #1
 80019b6:	2300      	movne	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	461a      	mov	r2, r3
 80019bc:	e00c      	b.n	80019d8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	43da      	mvns	r2, r3
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	4013      	ands	r3, r2
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d116      	bne.n	8001a0c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2220      	movs	r2, #32
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	f043 0220 	orr.w	r2, r3, #32
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e023      	b.n	8001a54 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	0c1b      	lsrs	r3, r3, #16
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d10d      	bne.n	8001a32 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	43da      	mvns	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	4013      	ands	r3, r2
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf0c      	ite	eq
 8001a28:	2301      	moveq	r3, #1
 8001a2a:	2300      	movne	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	e00c      	b.n	8001a4c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	43da      	mvns	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bf0c      	ite	eq
 8001a44:	2301      	moveq	r3, #1
 8001a46:	2300      	movne	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d093      	beq.n	800197a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a6a:	e071      	b.n	8001b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a7a:	d123      	bne.n	8001ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a8a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f043 0204 	orr.w	r2, r3, #4
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e067      	b.n	8001b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aca:	d041      	beq.n	8001b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001acc:	f7ff f9c2 	bl	8000e54 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d302      	bcc.n	8001ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d136      	bne.n	8001b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	0c1b      	lsrs	r3, r3, #16
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d10c      	bne.n	8001b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	4013      	ands	r3, r2
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	bf14      	ite	ne
 8001afe:	2301      	movne	r3, #1
 8001b00:	2300      	moveq	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	e00b      	b.n	8001b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	43da      	mvns	r2, r3
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	4013      	ands	r3, r2
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf14      	ite	ne
 8001b18:	2301      	movne	r3, #1
 8001b1a:	2300      	moveq	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d016      	beq.n	8001b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	f043 0220 	orr.w	r2, r3, #32
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e021      	b.n	8001b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	0c1b      	lsrs	r3, r3, #16
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d10c      	bne.n	8001b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	43da      	mvns	r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	4013      	ands	r3, r2
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bf14      	ite	ne
 8001b6c:	2301      	movne	r3, #1
 8001b6e:	2300      	moveq	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	e00b      	b.n	8001b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	bf14      	ite	ne
 8001b86:	2301      	movne	r3, #1
 8001b88:	2300      	moveq	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f47f af6d 	bne.w	8001a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ba8:	e034      	b.n	8001c14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 f886 	bl	8001cbc <I2C_IsAcknowledgeFailed>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e034      	b.n	8001c24 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc0:	d028      	beq.n	8001c14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc2:	f7ff f947 	bl	8000e54 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d302      	bcc.n	8001bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d11d      	bne.n	8001c14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be2:	2b80      	cmp	r3, #128	; 0x80
 8001be4:	d016      	beq.n	8001c14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f043 0220 	orr.w	r2, r3, #32
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e007      	b.n	8001c24 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1e:	2b80      	cmp	r3, #128	; 0x80
 8001c20:	d1c3      	bne.n	8001baa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c38:	e034      	b.n	8001ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 f83e 	bl	8001cbc <I2C_IsAcknowledgeFailed>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e034      	b.n	8001cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c50:	d028      	beq.n	8001ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c52:	f7ff f8ff 	bl	8000e54 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d302      	bcc.n	8001c68 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d11d      	bne.n	8001ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d016      	beq.n	8001ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f043 0220 	orr.w	r2, r3, #32
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e007      	b.n	8001cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d1c3      	bne.n	8001c3a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd2:	d11b      	bne.n	8001d0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cdc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	f043 0204 	orr.w	r2, r3, #4
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e272      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8087 	beq.w	8001e46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d38:	4b92      	ldr	r3, [pc, #584]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d00c      	beq.n	8001d5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d44:	4b8f      	ldr	r3, [pc, #572]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d112      	bne.n	8001d76 <HAL_RCC_OscConfig+0x5e>
 8001d50:	4b8c      	ldr	r3, [pc, #560]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5c:	d10b      	bne.n	8001d76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5e:	4b89      	ldr	r3, [pc, #548]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d06c      	beq.n	8001e44 <HAL_RCC_OscConfig+0x12c>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d168      	bne.n	8001e44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e24c      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCC_OscConfig+0x76>
 8001d80:	4b80      	ldr	r3, [pc, #512]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a7f      	ldr	r2, [pc, #508]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	e02e      	b.n	8001dec <HAL_RCC_OscConfig+0xd4>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x98>
 8001d96:	4b7b      	ldr	r3, [pc, #492]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a7a      	ldr	r2, [pc, #488]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	4b78      	ldr	r3, [pc, #480]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a77      	ldr	r2, [pc, #476]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e01d      	b.n	8001dec <HAL_RCC_OscConfig+0xd4>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0xbc>
 8001dba:	4b72      	ldr	r3, [pc, #456]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a71      	ldr	r2, [pc, #452]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b6f      	ldr	r3, [pc, #444]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a6e      	ldr	r2, [pc, #440]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e00b      	b.n	8001dec <HAL_RCC_OscConfig+0xd4>
 8001dd4:	4b6b      	ldr	r3, [pc, #428]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a6a      	ldr	r2, [pc, #424]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b68      	ldr	r3, [pc, #416]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a67      	ldr	r2, [pc, #412]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d013      	beq.n	8001e1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff f82e 	bl	8000e54 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7ff f82a 	bl	8000e54 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	; 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e200      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	4b5d      	ldr	r3, [pc, #372]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0xe4>
 8001e1a:	e014      	b.n	8001e46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff f81a 	bl	8000e54 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e24:	f7ff f816 	bl	8000e54 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	; 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e1ec      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e36:	4b53      	ldr	r3, [pc, #332]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x10c>
 8001e42:	e000      	b.n	8001e46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d063      	beq.n	8001f1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e52:	4b4c      	ldr	r3, [pc, #304]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e5e:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d11c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x18c>
 8001e6a:	4b46      	ldr	r3, [pc, #280]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d116      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e76:	4b43      	ldr	r3, [pc, #268]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_RCC_OscConfig+0x176>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e1c0      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4939      	ldr	r1, [pc, #228]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea2:	e03a      	b.n	8001f1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d020      	beq.n	8001eee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eac:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7fe ffcf 	bl	8000e54 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eba:	f7fe ffcb 	bl	8000e54 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e1a1      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed8:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4927      	ldr	r1, [pc, #156]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
 8001eec:	e015      	b.n	8001f1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7fe ffae 	bl	8000e54 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efc:	f7fe ffaa 	bl	8000e54 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e180      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d03a      	beq.n	8001f9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d019      	beq.n	8001f62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f34:	f7fe ff8e 	bl	8000e54 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7fe ff8a 	bl	8000e54 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e160      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f000 face 	bl	80024fc <RCC_Delay>
 8001f60:	e01c      	b.n	8001f9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f68:	f7fe ff74 	bl	8000e54 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6e:	e00f      	b.n	8001f90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f70:	f7fe ff70 	bl	8000e54 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d908      	bls.n	8001f90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e146      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000
 8001f88:	42420000 	.word	0x42420000
 8001f8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f90:	4b92      	ldr	r3, [pc, #584]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1e9      	bne.n	8001f70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80a6 	beq.w	80020f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fae:	4b8b      	ldr	r3, [pc, #556]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10d      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4b88      	ldr	r3, [pc, #544]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4a87      	ldr	r2, [pc, #540]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	61d3      	str	r3, [r2, #28]
 8001fc6:	4b85      	ldr	r3, [pc, #532]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd6:	4b82      	ldr	r3, [pc, #520]	; (80021e0 <HAL_RCC_OscConfig+0x4c8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d118      	bne.n	8002014 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe2:	4b7f      	ldr	r3, [pc, #508]	; (80021e0 <HAL_RCC_OscConfig+0x4c8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a7e      	ldr	r2, [pc, #504]	; (80021e0 <HAL_RCC_OscConfig+0x4c8>)
 8001fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fee:	f7fe ff31 	bl	8000e54 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff6:	f7fe ff2d 	bl	8000e54 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b64      	cmp	r3, #100	; 0x64
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e103      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002008:	4b75      	ldr	r3, [pc, #468]	; (80021e0 <HAL_RCC_OscConfig+0x4c8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d106      	bne.n	800202a <HAL_RCC_OscConfig+0x312>
 800201c:	4b6f      	ldr	r3, [pc, #444]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	4a6e      	ldr	r2, [pc, #440]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6213      	str	r3, [r2, #32]
 8002028:	e02d      	b.n	8002086 <HAL_RCC_OscConfig+0x36e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0x334>
 8002032:	4b6a      	ldr	r3, [pc, #424]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4a69      	ldr	r2, [pc, #420]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6213      	str	r3, [r2, #32]
 800203e:	4b67      	ldr	r3, [pc, #412]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4a66      	ldr	r2, [pc, #408]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002044:	f023 0304 	bic.w	r3, r3, #4
 8002048:	6213      	str	r3, [r2, #32]
 800204a:	e01c      	b.n	8002086 <HAL_RCC_OscConfig+0x36e>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b05      	cmp	r3, #5
 8002052:	d10c      	bne.n	800206e <HAL_RCC_OscConfig+0x356>
 8002054:	4b61      	ldr	r3, [pc, #388]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4a60      	ldr	r2, [pc, #384]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	6213      	str	r3, [r2, #32]
 8002060:	4b5e      	ldr	r3, [pc, #376]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	4a5d      	ldr	r2, [pc, #372]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6213      	str	r3, [r2, #32]
 800206c:	e00b      	b.n	8002086 <HAL_RCC_OscConfig+0x36e>
 800206e:	4b5b      	ldr	r3, [pc, #364]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a5a      	ldr	r2, [pc, #360]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	6213      	str	r3, [r2, #32]
 800207a:	4b58      	ldr	r3, [pc, #352]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	4a57      	ldr	r2, [pc, #348]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002080:	f023 0304 	bic.w	r3, r3, #4
 8002084:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d015      	beq.n	80020ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208e:	f7fe fee1 	bl	8000e54 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7fe fedd 	bl	8000e54 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e0b1      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ac:	4b4b      	ldr	r3, [pc, #300]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0ee      	beq.n	8002096 <HAL_RCC_OscConfig+0x37e>
 80020b8:	e014      	b.n	80020e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ba:	f7fe fecb 	bl	8000e54 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7fe fec7 	bl	8000e54 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e09b      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d8:	4b40      	ldr	r3, [pc, #256]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1ee      	bne.n	80020c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020e4:	7dfb      	ldrb	r3, [r7, #23]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d105      	bne.n	80020f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ea:	4b3c      	ldr	r3, [pc, #240]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	4a3b      	ldr	r2, [pc, #236]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8087 	beq.w	800220e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002100:	4b36      	ldr	r3, [pc, #216]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b08      	cmp	r3, #8
 800210a:	d061      	beq.n	80021d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d146      	bne.n	80021a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002114:	4b33      	ldr	r3, [pc, #204]	; (80021e4 <HAL_RCC_OscConfig+0x4cc>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7fe fe9b 	bl	8000e54 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002122:	f7fe fe97 	bl	8000e54 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e06d      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002134:	4b29      	ldr	r3, [pc, #164]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002148:	d108      	bne.n	800215c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800214a:	4b24      	ldr	r3, [pc, #144]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	4921      	ldr	r1, [pc, #132]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800215c:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a19      	ldr	r1, [r3, #32]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	430b      	orrs	r3, r1
 800216e:	491b      	ldr	r1, [pc, #108]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_RCC_OscConfig+0x4cc>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7fe fe6b 	bl	8000e54 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002182:	f7fe fe67 	bl	8000e54 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e03d      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x46a>
 80021a0:	e035      	b.n	800220e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a2:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <HAL_RCC_OscConfig+0x4cc>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe fe54 	bl	8000e54 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7fe fe50 	bl	8000e54 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e026      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x498>
 80021ce:	e01e      	b.n	800220e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e019      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40007000 	.word	0x40007000
 80021e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_OscConfig+0x500>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d106      	bne.n	800220a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d001      	beq.n	800220e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000

0800221c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0d0      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002230:	4b6a      	ldr	r3, [pc, #424]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d910      	bls.n	8002260 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b67      	ldr	r3, [pc, #412]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 0207 	bic.w	r2, r3, #7
 8002246:	4965      	ldr	r1, [pc, #404]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b63      	ldr	r3, [pc, #396]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0b8      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d020      	beq.n	80022ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002278:	4b59      	ldr	r3, [pc, #356]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a58      	ldr	r2, [pc, #352]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002282:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002290:	4b53      	ldr	r3, [pc, #332]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4a52      	ldr	r2, [pc, #328]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800229a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229c:	4b50      	ldr	r3, [pc, #320]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	494d      	ldr	r1, [pc, #308]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d040      	beq.n	800233c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b47      	ldr	r3, [pc, #284]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d115      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e07f      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d107      	bne.n	80022ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022da:	4b41      	ldr	r3, [pc, #260]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e073      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ea:	4b3d      	ldr	r3, [pc, #244]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e06b      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022fa:	4b39      	ldr	r3, [pc, #228]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f023 0203 	bic.w	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4936      	ldr	r1, [pc, #216]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800230c:	f7fe fda2 	bl	8000e54 <HAL_GetTick>
 8002310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	e00a      	b.n	800232a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002314:	f7fe fd9e 	bl	8000e54 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e053      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 020c 	and.w	r2, r3, #12
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	429a      	cmp	r2, r3
 800233a:	d1eb      	bne.n	8002314 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800233c:	4b27      	ldr	r3, [pc, #156]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d210      	bcs.n	800236c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b24      	ldr	r3, [pc, #144]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 0207 	bic.w	r2, r3, #7
 8002352:	4922      	ldr	r1, [pc, #136]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b20      	ldr	r3, [pc, #128]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e032      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4916      	ldr	r1, [pc, #88]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002396:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	490e      	ldr	r1, [pc, #56]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023aa:	f000 f821 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 80023ae:	4602      	mov	r2, r0
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	490a      	ldr	r1, [pc, #40]	; (80023e4 <HAL_RCC_ClockConfig+0x1c8>)
 80023bc:	5ccb      	ldrb	r3, [r1, r3]
 80023be:	fa22 f303 	lsr.w	r3, r2, r3
 80023c2:	4a09      	ldr	r2, [pc, #36]	; (80023e8 <HAL_RCC_ClockConfig+0x1cc>)
 80023c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_RCC_ClockConfig+0x1d0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe fd00 	bl	8000dd0 <HAL_InitTick>

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40022000 	.word	0x40022000
 80023e0:	40021000 	.word	0x40021000
 80023e4:	080045c4 	.word	0x080045c4
 80023e8:	20000000 	.word	0x20000000
 80023ec:	20000004 	.word	0x20000004

080023f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800240a:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <HAL_RCC_GetSysClockFreq+0x94>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b04      	cmp	r3, #4
 8002418:	d002      	beq.n	8002420 <HAL_RCC_GetSysClockFreq+0x30>
 800241a:	2b08      	cmp	r3, #8
 800241c:	d003      	beq.n	8002426 <HAL_RCC_GetSysClockFreq+0x36>
 800241e:	e027      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <HAL_RCC_GetSysClockFreq+0x98>)
 8002422:	613b      	str	r3, [r7, #16]
      break;
 8002424:	e027      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	0c9b      	lsrs	r3, r3, #18
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	4a17      	ldr	r2, [pc, #92]	; (800248c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002430:	5cd3      	ldrb	r3, [r2, r3]
 8002432:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d010      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <HAL_RCC_GetSysClockFreq+0x94>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	0c5b      	lsrs	r3, r3, #17
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	4a11      	ldr	r2, [pc, #68]	; (8002490 <HAL_RCC_GetSysClockFreq+0xa0>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <HAL_RCC_GetSysClockFreq+0x98>)
 8002452:	fb03 f202 	mul.w	r2, r3, r2
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	fbb2 f3f3 	udiv	r3, r2, r3
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	e004      	b.n	800246a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a0c      	ldr	r2, [pc, #48]	; (8002494 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002464:	fb02 f303 	mul.w	r3, r2, r3
 8002468:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	613b      	str	r3, [r7, #16]
      break;
 800246e:	e002      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_RCC_GetSysClockFreq+0x98>)
 8002472:	613b      	str	r3, [r7, #16]
      break;
 8002474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002476:	693b      	ldr	r3, [r7, #16]
}
 8002478:	4618      	mov	r0, r3
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	007a1200 	.word	0x007a1200
 800248c:	080045dc 	.word	0x080045dc
 8002490:	080045ec 	.word	0x080045ec
 8002494:	003d0900 	.word	0x003d0900

08002498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800249c:	4b02      	ldr	r3, [pc, #8]	; (80024a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	20000000 	.word	0x20000000

080024ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024b0:	f7ff fff2 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	0a1b      	lsrs	r3, r3, #8
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	4903      	ldr	r1, [pc, #12]	; (80024d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000
 80024d0:	080045d4 	.word	0x080045d4

080024d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024d8:	f7ff ffde 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	0adb      	lsrs	r3, r3, #11
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4903      	ldr	r1, [pc, #12]	; (80024f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ea:	5ccb      	ldrb	r3, [r1, r3]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000
 80024f8:	080045d4 	.word	0x080045d4

080024fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <RCC_Delay+0x34>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <RCC_Delay+0x38>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	0a5b      	lsrs	r3, r3, #9
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	fb02 f303 	mul.w	r3, r2, r3
 8002516:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002518:	bf00      	nop
  }
  while (Delay --);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1e5a      	subs	r2, r3, #1
 800251e:	60fa      	str	r2, [r7, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f9      	bne.n	8002518 <RCC_Delay+0x1c>
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	20000000 	.word	0x20000000
 8002534:	10624dd3 	.word	0x10624dd3

08002538 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e076      	b.n	8002638 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	2b00      	cmp	r3, #0
 8002550:	d108      	bne.n	8002564 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800255a:	d009      	beq.n	8002570 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	61da      	str	r2, [r3, #28]
 8002562:	e005      	b.n	8002570 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe faf0 	bl	8000b70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f4:	ea42 0103 	orr.w	r1, r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	0c1a      	lsrs	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f002 0204 	and.w	r2, r2, #4
 8002616:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002626:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800264e:	2301      	movs	r3, #1
 8002650:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002652:	f7fe fbff 	bl	8000e54 <HAL_GetTick>
 8002656:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800265e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002666:	887b      	ldrh	r3, [r7, #2]
 8002668:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800266a:	7ffb      	ldrb	r3, [r7, #31]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d00c      	beq.n	800268a <HAL_SPI_TransmitReceive+0x4a>
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002676:	d106      	bne.n	8002686 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d102      	bne.n	8002686 <HAL_SPI_TransmitReceive+0x46>
 8002680:	7ffb      	ldrb	r3, [r7, #31]
 8002682:	2b04      	cmp	r3, #4
 8002684:	d001      	beq.n	800268a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002686:	2302      	movs	r3, #2
 8002688:	e17f      	b.n	800298a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_SPI_TransmitReceive+0x5c>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_SPI_TransmitReceive+0x5c>
 8002696:	887b      	ldrh	r3, [r7, #2]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e174      	b.n	800298a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_SPI_TransmitReceive+0x6e>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e16d      	b.n	800298a <HAL_SPI_TransmitReceive+0x34a>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d003      	beq.n	80026ca <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2205      	movs	r2, #5
 80026c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	887a      	ldrh	r2, [r7, #2]
 80026da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	887a      	ldrh	r2, [r7, #2]
 80026ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	887a      	ldrh	r2, [r7, #2]
 80026f2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	2b40      	cmp	r3, #64	; 0x40
 800270c:	d007      	beq.n	800271e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002726:	d17e      	bne.n	8002826 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_SPI_TransmitReceive+0xf6>
 8002730:	8afb      	ldrh	r3, [r7, #22]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d16c      	bne.n	8002810 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	881a      	ldrh	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	1c9a      	adds	r2, r3, #2
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800275a:	e059      	b.n	8002810 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b02      	cmp	r3, #2
 8002768:	d11b      	bne.n	80027a2 <HAL_SPI_TransmitReceive+0x162>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d016      	beq.n	80027a2 <HAL_SPI_TransmitReceive+0x162>
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	2b01      	cmp	r3, #1
 8002778:	d113      	bne.n	80027a2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	881a      	ldrh	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	1c9a      	adds	r2, r3, #2
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d119      	bne.n	80027e4 <HAL_SPI_TransmitReceive+0x1a4>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d014      	beq.n	80027e4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c4:	b292      	uxth	r2, r2
 80027c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	1c9a      	adds	r2, r3, #2
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027e0:	2301      	movs	r3, #1
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027e4:	f7fe fb36 	bl	8000e54 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d80d      	bhi.n	8002810 <HAL_SPI_TransmitReceive+0x1d0>
 80027f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fa:	d009      	beq.n	8002810 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e0bc      	b.n	800298a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1a0      	bne.n	800275c <HAL_SPI_TransmitReceive+0x11c>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d19b      	bne.n	800275c <HAL_SPI_TransmitReceive+0x11c>
 8002824:	e082      	b.n	800292c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <HAL_SPI_TransmitReceive+0x1f4>
 800282e:	8afb      	ldrh	r3, [r7, #22]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d171      	bne.n	8002918 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	330c      	adds	r3, #12
 800283e:	7812      	ldrb	r2, [r2, #0]
 8002840:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800285a:	e05d      	b.n	8002918 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b02      	cmp	r3, #2
 8002868:	d11c      	bne.n	80028a4 <HAL_SPI_TransmitReceive+0x264>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800286e:	b29b      	uxth	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d017      	beq.n	80028a4 <HAL_SPI_TransmitReceive+0x264>
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	2b01      	cmp	r3, #1
 8002878:	d114      	bne.n	80028a4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	330c      	adds	r3, #12
 8002884:	7812      	ldrb	r2, [r2, #0]
 8002886:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d119      	bne.n	80028e6 <HAL_SPI_TransmitReceive+0x2a6>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d014      	beq.n	80028e6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028e2:	2301      	movs	r3, #1
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028e6:	f7fe fab5 	bl	8000e54 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d803      	bhi.n	80028fe <HAL_SPI_TransmitReceive+0x2be>
 80028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d102      	bne.n	8002904 <HAL_SPI_TransmitReceive+0x2c4>
 80028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002900:	2b00      	cmp	r3, #0
 8002902:	d109      	bne.n	8002918 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e038      	b.n	800298a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d19c      	bne.n	800285c <HAL_SPI_TransmitReceive+0x21c>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d197      	bne.n	800285c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800292c:	6a3a      	ldr	r2, [r7, #32]
 800292e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f8b7 	bl	8002aa4 <SPI_EndRxTxTransaction>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e01d      	b.n	800298a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10a      	bne.n	800296c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002988:	2300      	movs	r3, #0
  }
}
 800298a:	4618      	mov	r0, r3
 800298c:	3728      	adds	r7, #40	; 0x28
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029a4:	f7fe fa56 	bl	8000e54 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	4413      	add	r3, r2
 80029b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029b4:	f7fe fa4e 	bl	8000e54 <HAL_GetTick>
 80029b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029ba:	4b39      	ldr	r3, [pc, #228]	; (8002aa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	015b      	lsls	r3, r3, #5
 80029c0:	0d1b      	lsrs	r3, r3, #20
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	fb02 f303 	mul.w	r3, r2, r3
 80029c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029ca:	e054      	b.n	8002a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d2:	d050      	beq.n	8002a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029d4:	f7fe fa3e 	bl	8000e54 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d902      	bls.n	80029ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d13d      	bne.n	8002a66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a02:	d111      	bne.n	8002a28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a0c:	d004      	beq.n	8002a18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a16:	d107      	bne.n	8002a28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a30:	d10f      	bne.n	8002a52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e017      	b.n	8002a96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	bf0c      	ite	eq
 8002a86:	2301      	moveq	r3, #1
 8002a88:	2300      	movne	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d19b      	bne.n	80029cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000000 	.word	0x20000000

08002aa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	2102      	movs	r1, #2
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f7ff ff6a 	bl	8002994 <SPI_WaitFlagStateUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d007      	beq.n	8002ad6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aca:	f043 0220 	orr.w	r2, r3, #32
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e013      	b.n	8002afe <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2200      	movs	r2, #0
 8002ade:	2180      	movs	r1, #128	; 0x80
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f7ff ff57 	bl	8002994 <SPI_WaitFlagStateUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d007      	beq.n	8002afc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af0:	f043 0220 	orr.w	r2, r3, #32
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e000      	b.n	8002afe <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e042      	b.n	8002b9e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d106      	bne.n	8002b32 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7fe f86b 	bl	8000c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2224      	movs	r2, #36	; 0x24
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b48:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f82c 	bl	8002ba8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b5e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b6e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b7e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002be2:	f023 030c 	bic.w	r3, r3, #12
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	430b      	orrs	r3, r1
 8002bee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a2c      	ldr	r2, [pc, #176]	; (8002cbc <UART_SetConfig+0x114>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d103      	bne.n	8002c18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c10:	f7ff fc60 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	e002      	b.n	8002c1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c18:	f7ff fc48 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 8002c1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009a      	lsls	r2, r3, #2
 8002c28:	441a      	add	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c34:	4a22      	ldr	r2, [pc, #136]	; (8002cc0 <UART_SetConfig+0x118>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	0119      	lsls	r1, r3, #4
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	009a      	lsls	r2, r3, #2
 8002c48:	441a      	add	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c54:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <UART_SetConfig+0x118>)
 8002c56:	fba3 0302 	umull	r0, r3, r3, r2
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	2064      	movs	r0, #100	; 0x64
 8002c5e:	fb00 f303 	mul.w	r3, r0, r3
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	3332      	adds	r3, #50	; 0x32
 8002c68:	4a15      	ldr	r2, [pc, #84]	; (8002cc0 <UART_SetConfig+0x118>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c74:	4419      	add	r1, r3
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009a      	lsls	r2, r3, #2
 8002c80:	441a      	add	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <UART_SetConfig+0x118>)
 8002c8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	2064      	movs	r0, #100	; 0x64
 8002c96:	fb00 f303 	mul.w	r3, r0, r3
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	3332      	adds	r3, #50	; 0x32
 8002ca0:	4a07      	ldr	r2, [pc, #28]	; (8002cc0 <UART_SetConfig+0x118>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	f003 020f 	and.w	r2, r3, #15
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	440a      	add	r2, r1
 8002cb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40013800 	.word	0x40013800
 8002cc0:	51eb851f 	.word	0x51eb851f

08002cc4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cd6:	2b84      	cmp	r3, #132	; 0x84
 8002cd8:	d005      	beq.n	8002ce6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002cda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3303      	adds	r3, #3
 8002ce4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002cf6:	f000 faf1 	bl	80032dc <vTaskStartScheduler>
  
  return osOK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d02:	b089      	sub	sp, #36	; 0x24
 8002d04:	af04      	add	r7, sp, #16
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d020      	beq.n	8002d54 <osThreadCreate+0x54>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d01c      	beq.n	8002d54 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685c      	ldr	r4, [r3, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681d      	ldr	r5, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691e      	ldr	r6, [r3, #16]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ffc9 	bl	8002cc4 <makeFreeRtosPriority>
 8002d32:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d3c:	9202      	str	r2, [sp, #8]
 8002d3e:	9301      	str	r3, [sp, #4]
 8002d40:	9100      	str	r1, [sp, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	4632      	mov	r2, r6
 8002d46:	4629      	mov	r1, r5
 8002d48:	4620      	mov	r0, r4
 8002d4a:	f000 f8e8 	bl	8002f1e <xTaskCreateStatic>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	e01c      	b.n	8002d8e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685c      	ldr	r4, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d60:	b29e      	uxth	r6, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff ffab 	bl	8002cc4 <makeFreeRtosPriority>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	f107 030c 	add.w	r3, r7, #12
 8002d74:	9301      	str	r3, [sp, #4]
 8002d76:	9200      	str	r2, [sp, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	4632      	mov	r2, r6
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f000 f92a 	bl	8002fd8 <xTaskCreate>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d001      	beq.n	8002d8e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e000      	b.n	8002d90 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d98 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <osDelay+0x16>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	e000      	b.n	8002db0 <osDelay+0x18>
 8002dae:	2301      	movs	r3, #1
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fa5f 	bl	8003274 <vTaskDelay>
  
  return osOK;
 8002db6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f103 0208 	add.w	r2, r3, #8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f103 0208 	add.w	r2, r3, #8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f103 0208 	add.w	r2, r3, #8
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e16:	b480      	push	{r7}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	601a      	str	r2, [r3, #0]
}
 8002e52:	bf00      	nop
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e72:	d103      	bne.n	8002e7c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	e00c      	b.n	8002e96 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3308      	adds	r3, #8
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	e002      	b.n	8002e8a <vListInsert+0x2e>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d2f6      	bcs.n	8002e84 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	601a      	str	r2, [r3, #0]
}
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6892      	ldr	r2, [r2, #8]
 8002ee2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6852      	ldr	r2, [r2, #4]
 8002eec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d103      	bne.n	8002f00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	1e5a      	subs	r2, r3, #1
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr

08002f1e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b08e      	sub	sp, #56	; 0x38
 8002f22:	af04      	add	r7, sp, #16
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10a      	bne.n	8002f48 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f44:	bf00      	nop
 8002f46:	e7fe      	b.n	8002f46 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10a      	bne.n	8002f64 <xTaskCreateStatic+0x46>
	__asm volatile
 8002f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	61fb      	str	r3, [r7, #28]
}
 8002f60:	bf00      	nop
 8002f62:	e7fe      	b.n	8002f62 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f64:	23b4      	movs	r3, #180	; 0xb4
 8002f66:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2bb4      	cmp	r3, #180	; 0xb4
 8002f6c:	d00a      	beq.n	8002f84 <xTaskCreateStatic+0x66>
	__asm volatile
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	61bb      	str	r3, [r7, #24]
}
 8002f80:	bf00      	nop
 8002f82:	e7fe      	b.n	8002f82 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002f84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d01e      	beq.n	8002fca <xTaskCreateStatic+0xac>
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01b      	beq.n	8002fca <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	9302      	str	r3, [sp, #8]
 8002fac:	f107 0314 	add.w	r3, r7, #20
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	68b9      	ldr	r1, [r7, #8]
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f851 	bl	8003064 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fc4:	f000 f8ec 	bl	80031a0 <prvAddNewTaskToReadyList>
 8002fc8:	e001      	b.n	8002fce <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002fce:	697b      	ldr	r3, [r7, #20]
	}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3728      	adds	r7, #40	; 0x28
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08c      	sub	sp, #48	; 0x30
 8002fdc:	af04      	add	r7, sp, #16
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 feb7 	bl	8003d60 <pvPortMalloc>
 8002ff2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00e      	beq.n	8003018 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ffa:	20b4      	movs	r0, #180	; 0xb4
 8002ffc:	f000 feb0 	bl	8003d60 <pvPortMalloc>
 8003000:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	631a      	str	r2, [r3, #48]	; 0x30
 800300e:	e005      	b.n	800301c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003010:	6978      	ldr	r0, [r7, #20]
 8003012:	f000 ff71 	bl	8003ef8 <vPortFree>
 8003016:	e001      	b.n	800301c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003018:	2300      	movs	r3, #0
 800301a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d017      	beq.n	8003052 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800302a:	88fa      	ldrh	r2, [r7, #6]
 800302c:	2300      	movs	r3, #0
 800302e:	9303      	str	r3, [sp, #12]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	9302      	str	r3, [sp, #8]
 8003034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003036:	9301      	str	r3, [sp, #4]
 8003038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68b9      	ldr	r1, [r7, #8]
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f80f 	bl	8003064 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003046:	69f8      	ldr	r0, [r7, #28]
 8003048:	f000 f8aa 	bl	80031a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800304c:	2301      	movs	r3, #1
 800304e:	61bb      	str	r3, [r7, #24]
 8003050:	e002      	b.n	8003058 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
 8003056:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003058:	69bb      	ldr	r3, [r7, #24]
	}
 800305a:	4618      	mov	r0, r3
 800305c:	3720      	adds	r7, #32
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800307c:	3b01      	subs	r3, #1
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	f023 0307 	bic.w	r3, r3, #7
 800308a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <prvInitialiseNewTask+0x48>
	__asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	617b      	str	r3, [r7, #20]
}
 80030a8:	bf00      	nop
 80030aa:	e7fe      	b.n	80030aa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d01f      	beq.n	80030f2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
 80030b6:	e012      	b.n	80030de <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	4413      	add	r3, r2
 80030be:	7819      	ldrb	r1, [r3, #0]
 80030c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	4413      	add	r3, r2
 80030c6:	3334      	adds	r3, #52	; 0x34
 80030c8:	460a      	mov	r2, r1
 80030ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	4413      	add	r3, r2
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d006      	beq.n	80030e6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	3301      	adds	r3, #1
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	2b0f      	cmp	r3, #15
 80030e2:	d9e9      	bls.n	80030b8 <prvInitialiseNewTask+0x54>
 80030e4:	e000      	b.n	80030e8 <prvInitialiseNewTask+0x84>
			{
				break;
 80030e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030f0:	e003      	b.n	80030fa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	2b06      	cmp	r3, #6
 80030fe:	d901      	bls.n	8003104 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003100:	2306      	movs	r3, #6
 8003102:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003108:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800310e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003112:	2200      	movs	r2, #0
 8003114:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003118:	3304      	adds	r3, #4
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fe6f 	bl	8002dfe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	3318      	adds	r3, #24
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fe6a 	bl	8002dfe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800312e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003132:	f1c3 0207 	rsb	r2, r3, #7
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800313e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	2200      	movs	r2, #0
 8003144:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	2200      	movs	r2, #0
 800314c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	334c      	adds	r3, #76	; 0x4c
 8003154:	2260      	movs	r2, #96	; 0x60
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f001 f825 	bl	80041a8 <memset>
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	4a0c      	ldr	r2, [pc, #48]	; (8003194 <prvInitialiseNewTask+0x130>)
 8003162:	651a      	str	r2, [r3, #80]	; 0x50
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	4a0c      	ldr	r2, [pc, #48]	; (8003198 <prvInitialiseNewTask+0x134>)
 8003168:	655a      	str	r2, [r3, #84]	; 0x54
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	4a0b      	ldr	r2, [pc, #44]	; (800319c <prvInitialiseNewTask+0x138>)
 800316e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	68f9      	ldr	r1, [r7, #12]
 8003174:	69b8      	ldr	r0, [r7, #24]
 8003176:	f000 fc3d 	bl	80039f4 <pxPortInitialiseStack>
 800317a:	4602      	mov	r2, r0
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800318c:	bf00      	nop
 800318e:	3720      	adds	r7, #32
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	08004610 	.word	0x08004610
 8003198:	08004630 	.word	0x08004630
 800319c:	080045f0 	.word	0x080045f0

080031a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031a8:	f000 fd18 	bl	8003bdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031ac:	4b2a      	ldr	r3, [pc, #168]	; (8003258 <prvAddNewTaskToReadyList+0xb8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3301      	adds	r3, #1
 80031b2:	4a29      	ldr	r2, [pc, #164]	; (8003258 <prvAddNewTaskToReadyList+0xb8>)
 80031b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80031b6:	4b29      	ldr	r3, [pc, #164]	; (800325c <prvAddNewTaskToReadyList+0xbc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031be:	4a27      	ldr	r2, [pc, #156]	; (800325c <prvAddNewTaskToReadyList+0xbc>)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031c4:	4b24      	ldr	r3, [pc, #144]	; (8003258 <prvAddNewTaskToReadyList+0xb8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d110      	bne.n	80031ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80031cc:	f000 facc 	bl	8003768 <prvInitialiseTaskLists>
 80031d0:	e00d      	b.n	80031ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80031d2:	4b23      	ldr	r3, [pc, #140]	; (8003260 <prvAddNewTaskToReadyList+0xc0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031da:	4b20      	ldr	r3, [pc, #128]	; (800325c <prvAddNewTaskToReadyList+0xbc>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d802      	bhi.n	80031ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80031e8:	4a1c      	ldr	r2, [pc, #112]	; (800325c <prvAddNewTaskToReadyList+0xbc>)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80031ee:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <prvAddNewTaskToReadyList+0xc4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3301      	adds	r3, #1
 80031f4:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <prvAddNewTaskToReadyList+0xc4>)
 80031f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	2201      	movs	r2, #1
 80031fe:	409a      	lsls	r2, r3
 8003200:	4b19      	ldr	r3, [pc, #100]	; (8003268 <prvAddNewTaskToReadyList+0xc8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4313      	orrs	r3, r2
 8003206:	4a18      	ldr	r2, [pc, #96]	; (8003268 <prvAddNewTaskToReadyList+0xc8>)
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4a15      	ldr	r2, [pc, #84]	; (800326c <prvAddNewTaskToReadyList+0xcc>)
 8003218:	441a      	add	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3304      	adds	r3, #4
 800321e:	4619      	mov	r1, r3
 8003220:	4610      	mov	r0, r2
 8003222:	f7ff fdf8 	bl	8002e16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003226:	f000 fd09 	bl	8003c3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800322a:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <prvAddNewTaskToReadyList+0xc0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00e      	beq.n	8003250 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003232:	4b0a      	ldr	r3, [pc, #40]	; (800325c <prvAddNewTaskToReadyList+0xbc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	429a      	cmp	r2, r3
 800323e:	d207      	bcs.n	8003250 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <prvAddNewTaskToReadyList+0xd0>)
 8003242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20000548 	.word	0x20000548
 800325c:	20000448 	.word	0x20000448
 8003260:	20000554 	.word	0x20000554
 8003264:	20000564 	.word	0x20000564
 8003268:	20000550 	.word	0x20000550
 800326c:	2000044c 	.word	0x2000044c
 8003270:	e000ed04 	.word	0xe000ed04

08003274 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d017      	beq.n	80032b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003286:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <vTaskDelay+0x60>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <vTaskDelay+0x30>
	__asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	60bb      	str	r3, [r7, #8]
}
 80032a0:	bf00      	nop
 80032a2:	e7fe      	b.n	80032a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80032a4:	f000 f884 	bl	80033b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032a8:	2100      	movs	r1, #0
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fb3c 	bl	8003928 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80032b0:	f000 f88c 	bl	80033cc <xTaskResumeAll>
 80032b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d107      	bne.n	80032cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <vTaskDelay+0x64>)
 80032be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80032cc:	bf00      	nop
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20000570 	.word	0x20000570
 80032d8:	e000ed04 	.word	0xe000ed04

080032dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08a      	sub	sp, #40	; 0x28
 80032e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80032ea:	463a      	mov	r2, r7
 80032ec:	1d39      	adds	r1, r7, #4
 80032ee:	f107 0308 	add.w	r3, r7, #8
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fc ff2c 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80032f8:	6839      	ldr	r1, [r7, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	9202      	str	r2, [sp, #8]
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	2300      	movs	r3, #0
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	2300      	movs	r3, #0
 8003308:	460a      	mov	r2, r1
 800330a:	4921      	ldr	r1, [pc, #132]	; (8003390 <vTaskStartScheduler+0xb4>)
 800330c:	4821      	ldr	r0, [pc, #132]	; (8003394 <vTaskStartScheduler+0xb8>)
 800330e:	f7ff fe06 	bl	8002f1e <xTaskCreateStatic>
 8003312:	4603      	mov	r3, r0
 8003314:	4a20      	ldr	r2, [pc, #128]	; (8003398 <vTaskStartScheduler+0xbc>)
 8003316:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003318:	4b1f      	ldr	r3, [pc, #124]	; (8003398 <vTaskStartScheduler+0xbc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003320:	2301      	movs	r3, #1
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	e001      	b.n	800332a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d11b      	bne.n	8003368 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	613b      	str	r3, [r7, #16]
}
 8003342:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003344:	4b15      	ldr	r3, [pc, #84]	; (800339c <vTaskStartScheduler+0xc0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	334c      	adds	r3, #76	; 0x4c
 800334a:	4a15      	ldr	r2, [pc, #84]	; (80033a0 <vTaskStartScheduler+0xc4>)
 800334c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800334e:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <vTaskStartScheduler+0xc8>)
 8003350:	f04f 32ff 	mov.w	r2, #4294967295
 8003354:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003356:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <vTaskStartScheduler+0xcc>)
 8003358:	2201      	movs	r2, #1
 800335a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800335c:	4b13      	ldr	r3, [pc, #76]	; (80033ac <vTaskStartScheduler+0xd0>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003362:	f000 fbc9 	bl	8003af8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003366:	e00e      	b.n	8003386 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	d10a      	bne.n	8003386 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	60fb      	str	r3, [r7, #12]
}
 8003382:	bf00      	nop
 8003384:	e7fe      	b.n	8003384 <vTaskStartScheduler+0xa8>
}
 8003386:	bf00      	nop
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	080045bc 	.word	0x080045bc
 8003394:	08003739 	.word	0x08003739
 8003398:	2000056c 	.word	0x2000056c
 800339c:	20000448 	.word	0x20000448
 80033a0:	20000010 	.word	0x20000010
 80033a4:	20000568 	.word	0x20000568
 80033a8:	20000554 	.word	0x20000554
 80033ac:	2000054c 	.word	0x2000054c

080033b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <vTaskSuspendAll+0x18>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3301      	adds	r3, #1
 80033ba:	4a03      	ldr	r2, [pc, #12]	; (80033c8 <vTaskSuspendAll+0x18>)
 80033bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80033be:	bf00      	nop
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20000570 	.word	0x20000570

080033cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80033da:	4b41      	ldr	r3, [pc, #260]	; (80034e0 <xTaskResumeAll+0x114>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10a      	bne.n	80033f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	603b      	str	r3, [r7, #0]
}
 80033f4:	bf00      	nop
 80033f6:	e7fe      	b.n	80033f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80033f8:	f000 fbf0 	bl	8003bdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80033fc:	4b38      	ldr	r3, [pc, #224]	; (80034e0 <xTaskResumeAll+0x114>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3b01      	subs	r3, #1
 8003402:	4a37      	ldr	r2, [pc, #220]	; (80034e0 <xTaskResumeAll+0x114>)
 8003404:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003406:	4b36      	ldr	r3, [pc, #216]	; (80034e0 <xTaskResumeAll+0x114>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d161      	bne.n	80034d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800340e:	4b35      	ldr	r3, [pc, #212]	; (80034e4 <xTaskResumeAll+0x118>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d05d      	beq.n	80034d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003416:	e02e      	b.n	8003476 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003418:	4b33      	ldr	r3, [pc, #204]	; (80034e8 <xTaskResumeAll+0x11c>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3318      	adds	r3, #24
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fd51 	bl	8002ecc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3304      	adds	r3, #4
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fd4c 	bl	8002ecc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	2201      	movs	r2, #1
 800343a:	409a      	lsls	r2, r3
 800343c:	4b2b      	ldr	r3, [pc, #172]	; (80034ec <xTaskResumeAll+0x120>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4313      	orrs	r3, r2
 8003442:	4a2a      	ldr	r2, [pc, #168]	; (80034ec <xTaskResumeAll+0x120>)
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4a27      	ldr	r2, [pc, #156]	; (80034f0 <xTaskResumeAll+0x124>)
 8003454:	441a      	add	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	3304      	adds	r3, #4
 800345a:	4619      	mov	r1, r3
 800345c:	4610      	mov	r0, r2
 800345e:	f7ff fcda 	bl	8002e16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003466:	4b23      	ldr	r3, [pc, #140]	; (80034f4 <xTaskResumeAll+0x128>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	429a      	cmp	r2, r3
 800346e:	d302      	bcc.n	8003476 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003470:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <xTaskResumeAll+0x12c>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003476:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <xTaskResumeAll+0x11c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1cc      	bne.n	8003418 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003484:	f000 fa12 	bl	80038ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003488:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <xTaskResumeAll+0x130>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d010      	beq.n	80034b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003494:	f000 f836 	bl	8003504 <xTaskIncrementTick>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800349e:	4b16      	ldr	r3, [pc, #88]	; (80034f8 <xTaskResumeAll+0x12c>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f1      	bne.n	8003494 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80034b0:	4b12      	ldr	r3, [pc, #72]	; (80034fc <xTaskResumeAll+0x130>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034b6:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <xTaskResumeAll+0x12c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80034be:	2301      	movs	r3, #1
 80034c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034c2:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <xTaskResumeAll+0x134>)
 80034c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034d2:	f000 fbb3 	bl	8003c3c <vPortExitCritical>

	return xAlreadyYielded;
 80034d6:	68bb      	ldr	r3, [r7, #8]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000570 	.word	0x20000570
 80034e4:	20000548 	.word	0x20000548
 80034e8:	20000508 	.word	0x20000508
 80034ec:	20000550 	.word	0x20000550
 80034f0:	2000044c 	.word	0x2000044c
 80034f4:	20000448 	.word	0x20000448
 80034f8:	2000055c 	.word	0x2000055c
 80034fc:	20000558 	.word	0x20000558
 8003500:	e000ed04 	.word	0xe000ed04

08003504 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800350e:	4b4e      	ldr	r3, [pc, #312]	; (8003648 <xTaskIncrementTick+0x144>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f040 808e 	bne.w	8003634 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003518:	4b4c      	ldr	r3, [pc, #304]	; (800364c <xTaskIncrementTick+0x148>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3301      	adds	r3, #1
 800351e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003520:	4a4a      	ldr	r2, [pc, #296]	; (800364c <xTaskIncrementTick+0x148>)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d120      	bne.n	800356e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800352c:	4b48      	ldr	r3, [pc, #288]	; (8003650 <xTaskIncrementTick+0x14c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <xTaskIncrementTick+0x48>
	__asm volatile
 8003536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	603b      	str	r3, [r7, #0]
}
 8003548:	bf00      	nop
 800354a:	e7fe      	b.n	800354a <xTaskIncrementTick+0x46>
 800354c:	4b40      	ldr	r3, [pc, #256]	; (8003650 <xTaskIncrementTick+0x14c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	4b40      	ldr	r3, [pc, #256]	; (8003654 <xTaskIncrementTick+0x150>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a3e      	ldr	r2, [pc, #248]	; (8003650 <xTaskIncrementTick+0x14c>)
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	4a3e      	ldr	r2, [pc, #248]	; (8003654 <xTaskIncrementTick+0x150>)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	4b3d      	ldr	r3, [pc, #244]	; (8003658 <xTaskIncrementTick+0x154>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3301      	adds	r3, #1
 8003566:	4a3c      	ldr	r2, [pc, #240]	; (8003658 <xTaskIncrementTick+0x154>)
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	f000 f99f 	bl	80038ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800356e:	4b3b      	ldr	r3, [pc, #236]	; (800365c <xTaskIncrementTick+0x158>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	429a      	cmp	r2, r3
 8003576:	d348      	bcc.n	800360a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003578:	4b35      	ldr	r3, [pc, #212]	; (8003650 <xTaskIncrementTick+0x14c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d104      	bne.n	800358c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003582:	4b36      	ldr	r3, [pc, #216]	; (800365c <xTaskIncrementTick+0x158>)
 8003584:	f04f 32ff 	mov.w	r2, #4294967295
 8003588:	601a      	str	r2, [r3, #0]
					break;
 800358a:	e03e      	b.n	800360a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800358c:	4b30      	ldr	r3, [pc, #192]	; (8003650 <xTaskIncrementTick+0x14c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d203      	bcs.n	80035ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035a4:	4a2d      	ldr	r2, [pc, #180]	; (800365c <xTaskIncrementTick+0x158>)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80035aa:	e02e      	b.n	800360a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	3304      	adds	r3, #4
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fc8b 	bl	8002ecc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d004      	beq.n	80035c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	3318      	adds	r3, #24
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff fc82 	bl	8002ecc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	2201      	movs	r2, #1
 80035ce:	409a      	lsls	r2, r3
 80035d0:	4b23      	ldr	r3, [pc, #140]	; (8003660 <xTaskIncrementTick+0x15c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	4a22      	ldr	r2, [pc, #136]	; (8003660 <xTaskIncrementTick+0x15c>)
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4a1f      	ldr	r2, [pc, #124]	; (8003664 <xTaskIncrementTick+0x160>)
 80035e8:	441a      	add	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	3304      	adds	r3, #4
 80035ee:	4619      	mov	r1, r3
 80035f0:	4610      	mov	r0, r2
 80035f2:	f7ff fc10 	bl	8002e16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fa:	4b1b      	ldr	r3, [pc, #108]	; (8003668 <xTaskIncrementTick+0x164>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	429a      	cmp	r2, r3
 8003602:	d3b9      	bcc.n	8003578 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003604:	2301      	movs	r3, #1
 8003606:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003608:	e7b6      	b.n	8003578 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800360a:	4b17      	ldr	r3, [pc, #92]	; (8003668 <xTaskIncrementTick+0x164>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003610:	4914      	ldr	r1, [pc, #80]	; (8003664 <xTaskIncrementTick+0x160>)
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d901      	bls.n	8003626 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003622:	2301      	movs	r3, #1
 8003624:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003626:	4b11      	ldr	r3, [pc, #68]	; (800366c <xTaskIncrementTick+0x168>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d007      	beq.n	800363e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800362e:	2301      	movs	r3, #1
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	e004      	b.n	800363e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003634:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <xTaskIncrementTick+0x16c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3301      	adds	r3, #1
 800363a:	4a0d      	ldr	r2, [pc, #52]	; (8003670 <xTaskIncrementTick+0x16c>)
 800363c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800363e:	697b      	ldr	r3, [r7, #20]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000570 	.word	0x20000570
 800364c:	2000054c 	.word	0x2000054c
 8003650:	20000500 	.word	0x20000500
 8003654:	20000504 	.word	0x20000504
 8003658:	20000560 	.word	0x20000560
 800365c:	20000568 	.word	0x20000568
 8003660:	20000550 	.word	0x20000550
 8003664:	2000044c 	.word	0x2000044c
 8003668:	20000448 	.word	0x20000448
 800366c:	2000055c 	.word	0x2000055c
 8003670:	20000558 	.word	0x20000558

08003674 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800367a:	4b29      	ldr	r3, [pc, #164]	; (8003720 <vTaskSwitchContext+0xac>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003682:	4b28      	ldr	r3, [pc, #160]	; (8003724 <vTaskSwitchContext+0xb0>)
 8003684:	2201      	movs	r2, #1
 8003686:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003688:	e044      	b.n	8003714 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800368a:	4b26      	ldr	r3, [pc, #152]	; (8003724 <vTaskSwitchContext+0xb0>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003690:	4b25      	ldr	r3, [pc, #148]	; (8003728 <vTaskSwitchContext+0xb4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800369e:	7afb      	ldrb	r3, [r7, #11]
 80036a0:	f1c3 031f 	rsb	r3, r3, #31
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	4921      	ldr	r1, [pc, #132]	; (800372c <vTaskSwitchContext+0xb8>)
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10a      	bne.n	80036d0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80036ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	607b      	str	r3, [r7, #4]
}
 80036cc:	bf00      	nop
 80036ce:	e7fe      	b.n	80036ce <vTaskSwitchContext+0x5a>
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4a14      	ldr	r2, [pc, #80]	; (800372c <vTaskSwitchContext+0xb8>)
 80036dc:	4413      	add	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	3308      	adds	r3, #8
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d104      	bne.n	8003700 <vTaskSwitchContext+0x8c>
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	605a      	str	r2, [r3, #4]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	4a0a      	ldr	r2, [pc, #40]	; (8003730 <vTaskSwitchContext+0xbc>)
 8003708:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <vTaskSwitchContext+0xbc>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	334c      	adds	r3, #76	; 0x4c
 8003710:	4a08      	ldr	r2, [pc, #32]	; (8003734 <vTaskSwitchContext+0xc0>)
 8003712:	6013      	str	r3, [r2, #0]
}
 8003714:	bf00      	nop
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	20000570 	.word	0x20000570
 8003724:	2000055c 	.word	0x2000055c
 8003728:	20000550 	.word	0x20000550
 800372c:	2000044c 	.word	0x2000044c
 8003730:	20000448 	.word	0x20000448
 8003734:	20000010 	.word	0x20000010

08003738 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003740:	f000 f852 	bl	80037e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <prvIdleTask+0x28>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d9f9      	bls.n	8003740 <prvIdleTask+0x8>
			{
				taskYIELD();
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <prvIdleTask+0x2c>)
 800374e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800375c:	e7f0      	b.n	8003740 <prvIdleTask+0x8>
 800375e:	bf00      	nop
 8003760:	2000044c 	.word	0x2000044c
 8003764:	e000ed04 	.word	0xe000ed04

08003768 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800376e:	2300      	movs	r3, #0
 8003770:	607b      	str	r3, [r7, #4]
 8003772:	e00c      	b.n	800378e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4a12      	ldr	r2, [pc, #72]	; (80037c8 <prvInitialiseTaskLists+0x60>)
 8003780:	4413      	add	r3, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fb1c 	bl	8002dc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3301      	adds	r3, #1
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b06      	cmp	r3, #6
 8003792:	d9ef      	bls.n	8003774 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003794:	480d      	ldr	r0, [pc, #52]	; (80037cc <prvInitialiseTaskLists+0x64>)
 8003796:	f7ff fb13 	bl	8002dc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800379a:	480d      	ldr	r0, [pc, #52]	; (80037d0 <prvInitialiseTaskLists+0x68>)
 800379c:	f7ff fb10 	bl	8002dc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037a0:	480c      	ldr	r0, [pc, #48]	; (80037d4 <prvInitialiseTaskLists+0x6c>)
 80037a2:	f7ff fb0d 	bl	8002dc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80037a6:	480c      	ldr	r0, [pc, #48]	; (80037d8 <prvInitialiseTaskLists+0x70>)
 80037a8:	f7ff fb0a 	bl	8002dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80037ac:	480b      	ldr	r0, [pc, #44]	; (80037dc <prvInitialiseTaskLists+0x74>)
 80037ae:	f7ff fb07 	bl	8002dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80037b2:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <prvInitialiseTaskLists+0x78>)
 80037b4:	4a05      	ldr	r2, [pc, #20]	; (80037cc <prvInitialiseTaskLists+0x64>)
 80037b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037b8:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <prvInitialiseTaskLists+0x7c>)
 80037ba:	4a05      	ldr	r2, [pc, #20]	; (80037d0 <prvInitialiseTaskLists+0x68>)
 80037bc:	601a      	str	r2, [r3, #0]
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	2000044c 	.word	0x2000044c
 80037cc:	200004d8 	.word	0x200004d8
 80037d0:	200004ec 	.word	0x200004ec
 80037d4:	20000508 	.word	0x20000508
 80037d8:	2000051c 	.word	0x2000051c
 80037dc:	20000534 	.word	0x20000534
 80037e0:	20000500 	.word	0x20000500
 80037e4:	20000504 	.word	0x20000504

080037e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037ee:	e019      	b.n	8003824 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80037f0:	f000 f9f4 	bl	8003bdc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037f4:	4b10      	ldr	r3, [pc, #64]	; (8003838 <prvCheckTasksWaitingTermination+0x50>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3304      	adds	r3, #4
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff fb63 	bl	8002ecc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003806:	4b0d      	ldr	r3, [pc, #52]	; (800383c <prvCheckTasksWaitingTermination+0x54>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3b01      	subs	r3, #1
 800380c:	4a0b      	ldr	r2, [pc, #44]	; (800383c <prvCheckTasksWaitingTermination+0x54>)
 800380e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <prvCheckTasksWaitingTermination+0x58>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3b01      	subs	r3, #1
 8003816:	4a0a      	ldr	r2, [pc, #40]	; (8003840 <prvCheckTasksWaitingTermination+0x58>)
 8003818:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800381a:	f000 fa0f 	bl	8003c3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f810 	bl	8003844 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003824:	4b06      	ldr	r3, [pc, #24]	; (8003840 <prvCheckTasksWaitingTermination+0x58>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e1      	bne.n	80037f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	2000051c 	.word	0x2000051c
 800383c:	20000548 	.word	0x20000548
 8003840:	20000530 	.word	0x20000530

08003844 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	334c      	adds	r3, #76	; 0x4c
 8003850:	4618      	mov	r0, r3
 8003852:	f000 fd9b 	bl	800438c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d108      	bne.n	8003872 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fb47 	bl	8003ef8 <vPortFree>
				vPortFree( pxTCB );
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fb44 	bl	8003ef8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003870:	e018      	b.n	80038a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d103      	bne.n	8003884 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fb3b 	bl	8003ef8 <vPortFree>
	}
 8003882:	e00f      	b.n	80038a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800388a:	2b02      	cmp	r3, #2
 800388c:	d00a      	beq.n	80038a4 <prvDeleteTCB+0x60>
	__asm volatile
 800388e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	60fb      	str	r3, [r7, #12]
}
 80038a0:	bf00      	nop
 80038a2:	e7fe      	b.n	80038a2 <prvDeleteTCB+0x5e>
	}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038b2:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <prvResetNextTaskUnblockTime+0x38>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d104      	bne.n	80038c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <prvResetNextTaskUnblockTime+0x3c>)
 80038be:	f04f 32ff 	mov.w	r2, #4294967295
 80038c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80038c4:	e008      	b.n	80038d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038c6:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <prvResetNextTaskUnblockTime+0x38>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	4a04      	ldr	r2, [pc, #16]	; (80038e8 <prvResetNextTaskUnblockTime+0x3c>)
 80038d6:	6013      	str	r3, [r2, #0]
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	20000500 	.word	0x20000500
 80038e8:	20000568 	.word	0x20000568

080038ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <xTaskGetSchedulerState+0x34>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d102      	bne.n	8003900 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038fa:	2301      	movs	r3, #1
 80038fc:	607b      	str	r3, [r7, #4]
 80038fe:	e008      	b.n	8003912 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003900:	4b08      	ldr	r3, [pc, #32]	; (8003924 <xTaskGetSchedulerState+0x38>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d102      	bne.n	800390e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003908:	2302      	movs	r3, #2
 800390a:	607b      	str	r3, [r7, #4]
 800390c:	e001      	b.n	8003912 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800390e:	2300      	movs	r3, #0
 8003910:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003912:	687b      	ldr	r3, [r7, #4]
	}
 8003914:	4618      	mov	r0, r3
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	20000554 	.word	0x20000554
 8003924:	20000570 	.word	0x20000570

08003928 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003932:	4b29      	ldr	r3, [pc, #164]	; (80039d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003938:	4b28      	ldr	r3, [pc, #160]	; (80039dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3304      	adds	r3, #4
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff fac4 	bl	8002ecc <uxListRemove>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10b      	bne.n	8003962 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800394a:	4b24      	ldr	r3, [pc, #144]	; (80039dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	2201      	movs	r2, #1
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43da      	mvns	r2, r3
 8003958:	4b21      	ldr	r3, [pc, #132]	; (80039e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4013      	ands	r3, r2
 800395e:	4a20      	ldr	r2, [pc, #128]	; (80039e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003960:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003968:	d10a      	bne.n	8003980 <prvAddCurrentTaskToDelayedList+0x58>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d007      	beq.n	8003980 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003970:	4b1a      	ldr	r3, [pc, #104]	; (80039dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3304      	adds	r3, #4
 8003976:	4619      	mov	r1, r3
 8003978:	481a      	ldr	r0, [pc, #104]	; (80039e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800397a:	f7ff fa4c 	bl	8002e16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800397e:	e026      	b.n	80039ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4413      	add	r3, r2
 8003986:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003988:	4b14      	ldr	r3, [pc, #80]	; (80039dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	429a      	cmp	r2, r3
 8003996:	d209      	bcs.n	80039ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003998:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3304      	adds	r3, #4
 80039a2:	4619      	mov	r1, r3
 80039a4:	4610      	mov	r0, r2
 80039a6:	f7ff fa59 	bl	8002e5c <vListInsert>
}
 80039aa:	e010      	b.n	80039ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3304      	adds	r3, #4
 80039b6:	4619      	mov	r1, r3
 80039b8:	4610      	mov	r0, r2
 80039ba:	f7ff fa4f 	bl	8002e5c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d202      	bcs.n	80039ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80039c8:	4a09      	ldr	r2, [pc, #36]	; (80039f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	6013      	str	r3, [r2, #0]
}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	2000054c 	.word	0x2000054c
 80039dc:	20000448 	.word	0x20000448
 80039e0:	20000550 	.word	0x20000550
 80039e4:	20000534 	.word	0x20000534
 80039e8:	20000504 	.word	0x20000504
 80039ec:	20000500 	.word	0x20000500
 80039f0:	20000568 	.word	0x20000568

080039f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3b04      	subs	r3, #4
 8003a04:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3b04      	subs	r3, #4
 8003a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f023 0201 	bic.w	r2, r3, #1
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	3b04      	subs	r3, #4
 8003a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a24:	4a08      	ldr	r2, [pc, #32]	; (8003a48 <pxPortInitialiseStack+0x54>)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3b14      	subs	r3, #20
 8003a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3b20      	subs	r3, #32
 8003a3a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr
 8003a48:	08003a4d 	.word	0x08003a4d

08003a4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a56:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <prvTaskExitError+0x54>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5e:	d00a      	beq.n	8003a76 <prvTaskExitError+0x2a>
	__asm volatile
 8003a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	60fb      	str	r3, [r7, #12]
}
 8003a72:	bf00      	nop
 8003a74:	e7fe      	b.n	8003a74 <prvTaskExitError+0x28>
	__asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	60bb      	str	r3, [r7, #8]
}
 8003a88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003a8a:	bf00      	nop
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0fc      	beq.n	8003a8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003a92:	bf00      	nop
 8003a94:	bf00      	nop
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	2000000c 	.word	0x2000000c
	...

08003ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ab0:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <pxCurrentTCBConst2>)
 8003ab2:	6819      	ldr	r1, [r3, #0]
 8003ab4:	6808      	ldr	r0, [r1, #0]
 8003ab6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003aba:	f380 8809 	msr	PSP, r0
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	f04f 0000 	mov.w	r0, #0
 8003ac6:	f380 8811 	msr	BASEPRI, r0
 8003aca:	f04e 0e0d 	orr.w	lr, lr, #13
 8003ace:	4770      	bx	lr

08003ad0 <pxCurrentTCBConst2>:
 8003ad0:	20000448 	.word	0x20000448
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop

08003ad8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003ad8:	4806      	ldr	r0, [pc, #24]	; (8003af4 <prvPortStartFirstTask+0x1c>)
 8003ada:	6800      	ldr	r0, [r0, #0]
 8003adc:	6800      	ldr	r0, [r0, #0]
 8003ade:	f380 8808 	msr	MSP, r0
 8003ae2:	b662      	cpsie	i
 8003ae4:	b661      	cpsie	f
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	df00      	svc	0
 8003af0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003af2:	bf00      	nop
 8003af4:	e000ed08 	.word	0xe000ed08

08003af8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003afe:	4b32      	ldr	r3, [pc, #200]	; (8003bc8 <xPortStartScheduler+0xd0>)
 8003b00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	22ff      	movs	r2, #255	; 0xff
 8003b0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	4b2a      	ldr	r3, [pc, #168]	; (8003bcc <xPortStartScheduler+0xd4>)
 8003b24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b26:	4b2a      	ldr	r3, [pc, #168]	; (8003bd0 <xPortStartScheduler+0xd8>)
 8003b28:	2207      	movs	r2, #7
 8003b2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b2c:	e009      	b.n	8003b42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003b2e:	4b28      	ldr	r3, [pc, #160]	; (8003bd0 <xPortStartScheduler+0xd8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	4a26      	ldr	r2, [pc, #152]	; (8003bd0 <xPortStartScheduler+0xd8>)
 8003b36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b42:	78fb      	ldrb	r3, [r7, #3]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4a:	2b80      	cmp	r3, #128	; 0x80
 8003b4c:	d0ef      	beq.n	8003b2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <xPortStartScheduler+0xd8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f1c3 0307 	rsb	r3, r3, #7
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d00a      	beq.n	8003b70 <xPortStartScheduler+0x78>
	__asm volatile
 8003b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5e:	f383 8811 	msr	BASEPRI, r3
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	60bb      	str	r3, [r7, #8]
}
 8003b6c:	bf00      	nop
 8003b6e:	e7fe      	b.n	8003b6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003b70:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <xPortStartScheduler+0xd8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	4a16      	ldr	r2, [pc, #88]	; (8003bd0 <xPortStartScheduler+0xd8>)
 8003b78:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b7a:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <xPortStartScheduler+0xd8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b82:	4a13      	ldr	r2, [pc, #76]	; (8003bd0 <xPortStartScheduler+0xd8>)
 8003b84:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b8e:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <xPortStartScheduler+0xdc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a10      	ldr	r2, [pc, #64]	; (8003bd4 <xPortStartScheduler+0xdc>)
 8003b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b9a:	4b0e      	ldr	r3, [pc, #56]	; (8003bd4 <xPortStartScheduler+0xdc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a0d      	ldr	r2, [pc, #52]	; (8003bd4 <xPortStartScheduler+0xdc>)
 8003ba0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ba4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ba6:	f000 f8b9 	bl	8003d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003baa:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <xPortStartScheduler+0xe0>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003bb0:	f7ff ff92 	bl	8003ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003bb4:	f7ff fd5e 	bl	8003674 <vTaskSwitchContext>
	prvTaskExitError();
 8003bb8:	f7ff ff48 	bl	8003a4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	e000e400 	.word	0xe000e400
 8003bcc:	20000574 	.word	0x20000574
 8003bd0:	20000578 	.word	0x20000578
 8003bd4:	e000ed20 	.word	0xe000ed20
 8003bd8:	2000000c 	.word	0x2000000c

08003bdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	607b      	str	r3, [r7, #4]
}
 8003bf4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003bf6:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <vPortEnterCritical+0x58>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	4a0d      	ldr	r2, [pc, #52]	; (8003c34 <vPortEnterCritical+0x58>)
 8003bfe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <vPortEnterCritical+0x58>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d10f      	bne.n	8003c28 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <vPortEnterCritical+0x5c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <vPortEnterCritical+0x4c>
	__asm volatile
 8003c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c16:	f383 8811 	msr	BASEPRI, r3
 8003c1a:	f3bf 8f6f 	isb	sy
 8003c1e:	f3bf 8f4f 	dsb	sy
 8003c22:	603b      	str	r3, [r7, #0]
}
 8003c24:	bf00      	nop
 8003c26:	e7fe      	b.n	8003c26 <vPortEnterCritical+0x4a>
	}
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	2000000c 	.word	0x2000000c
 8003c38:	e000ed04 	.word	0xe000ed04

08003c3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003c42:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <vPortExitCritical+0x4c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10a      	bne.n	8003c60 <vPortExitCritical+0x24>
	__asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	607b      	str	r3, [r7, #4]
}
 8003c5c:	bf00      	nop
 8003c5e:	e7fe      	b.n	8003c5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003c60:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <vPortExitCritical+0x4c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <vPortExitCritical+0x4c>)
 8003c68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003c6a:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <vPortExitCritical+0x4c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d105      	bne.n	8003c7e <vPortExitCritical+0x42>
 8003c72:	2300      	movs	r3, #0
 8003c74:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr
 8003c88:	2000000c 	.word	0x2000000c
 8003c8c:	00000000 	.word	0x00000000

08003c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003c90:	f3ef 8009 	mrs	r0, PSP
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <pxCurrentTCBConst>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ca0:	6010      	str	r0, [r2, #0]
 8003ca2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003ca6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003caa:	f380 8811 	msr	BASEPRI, r0
 8003cae:	f7ff fce1 	bl	8003674 <vTaskSwitchContext>
 8003cb2:	f04f 0000 	mov.w	r0, #0
 8003cb6:	f380 8811 	msr	BASEPRI, r0
 8003cba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003cbe:	6819      	ldr	r1, [r3, #0]
 8003cc0:	6808      	ldr	r0, [r1, #0]
 8003cc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003cc6:	f380 8809 	msr	PSP, r0
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	4770      	bx	lr

08003cd0 <pxCurrentTCBConst>:
 8003cd0:	20000448 	.word	0x20000448
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop

08003cd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8003cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce2:	f383 8811 	msr	BASEPRI, r3
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	607b      	str	r3, [r7, #4]
}
 8003cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003cf2:	f7ff fc07 	bl	8003504 <xTaskIncrementTick>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <xPortSysTickHandler+0x40>)
 8003cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	2300      	movs	r3, #0
 8003d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	f383 8811 	msr	BASEPRI, r3
}
 8003d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003d10:	bf00      	nop
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	e000ed04 	.word	0xe000ed04

08003d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003d20:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <vPortSetupTimerInterrupt+0x30>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003d26:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <vPortSetupTimerInterrupt+0x34>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003d2c:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <vPortSetupTimerInterrupt+0x38>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a09      	ldr	r2, [pc, #36]	; (8003d58 <vPortSetupTimerInterrupt+0x3c>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	099b      	lsrs	r3, r3, #6
 8003d38:	4a08      	ldr	r2, [pc, #32]	; (8003d5c <vPortSetupTimerInterrupt+0x40>)
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d3e:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <vPortSetupTimerInterrupt+0x30>)
 8003d40:	2207      	movs	r2, #7
 8003d42:	601a      	str	r2, [r3, #0]
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	e000e010 	.word	0xe000e010
 8003d50:	e000e018 	.word	0xe000e018
 8003d54:	20000000 	.word	0x20000000
 8003d58:	10624dd3 	.word	0x10624dd3
 8003d5c:	e000e014 	.word	0xe000e014

08003d60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08a      	sub	sp, #40	; 0x28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003d6c:	f7ff fb20 	bl	80033b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003d70:	4b5b      	ldr	r3, [pc, #364]	; (8003ee0 <pvPortMalloc+0x180>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003d78:	f000 f920 	bl	8003fbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d7c:	4b59      	ldr	r3, [pc, #356]	; (8003ee4 <pvPortMalloc+0x184>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f040 8093 	bne.w	8003eb0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d01d      	beq.n	8003dcc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003d90:	2208      	movs	r2, #8
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d014      	beq.n	8003dcc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f023 0307 	bic.w	r3, r3, #7
 8003da8:	3308      	adds	r3, #8
 8003daa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <pvPortMalloc+0x6c>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	617b      	str	r3, [r7, #20]
}
 8003dc8:	bf00      	nop
 8003dca:	e7fe      	b.n	8003dca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d06e      	beq.n	8003eb0 <pvPortMalloc+0x150>
 8003dd2:	4b45      	ldr	r3, [pc, #276]	; (8003ee8 <pvPortMalloc+0x188>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d869      	bhi.n	8003eb0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003ddc:	4b43      	ldr	r3, [pc, #268]	; (8003eec <pvPortMalloc+0x18c>)
 8003dde:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003de0:	4b42      	ldr	r3, [pc, #264]	; (8003eec <pvPortMalloc+0x18c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003de6:	e004      	b.n	8003df2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d903      	bls.n	8003e04 <pvPortMalloc+0xa4>
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f1      	bne.n	8003de8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003e04:	4b36      	ldr	r3, [pc, #216]	; (8003ee0 <pvPortMalloc+0x180>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d050      	beq.n	8003eb0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2208      	movs	r2, #8
 8003e14:	4413      	add	r3, r2
 8003e16:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	1ad2      	subs	r2, r2, r3
 8003e28:	2308      	movs	r3, #8
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d91f      	bls.n	8003e70 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <pvPortMalloc+0xf8>
	__asm volatile
 8003e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	613b      	str	r3, [r7, #16]
}
 8003e54:	bf00      	nop
 8003e56:	e7fe      	b.n	8003e56 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	1ad2      	subs	r2, r2, r3
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e6a:	69b8      	ldr	r0, [r7, #24]
 8003e6c:	f000 f908 	bl	8004080 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e70:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <pvPortMalloc+0x188>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ee8 <pvPortMalloc+0x188>)
 8003e7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <pvPortMalloc+0x188>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <pvPortMalloc+0x190>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d203      	bcs.n	8003e92 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e8a:	4b17      	ldr	r3, [pc, #92]	; (8003ee8 <pvPortMalloc+0x188>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a18      	ldr	r2, [pc, #96]	; (8003ef0 <pvPortMalloc+0x190>)
 8003e90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <pvPortMalloc+0x184>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003ea6:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <pvPortMalloc+0x194>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	4a11      	ldr	r2, [pc, #68]	; (8003ef4 <pvPortMalloc+0x194>)
 8003eae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003eb0:	f7ff fa8c 	bl	80033cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <pvPortMalloc+0x174>
	__asm volatile
 8003ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	60fb      	str	r3, [r7, #12]
}
 8003ed0:	bf00      	nop
 8003ed2:	e7fe      	b.n	8003ed2 <pvPortMalloc+0x172>
	return pvReturn;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3728      	adds	r7, #40	; 0x28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20001184 	.word	0x20001184
 8003ee4:	20001198 	.word	0x20001198
 8003ee8:	20001188 	.word	0x20001188
 8003eec:	2000117c 	.word	0x2000117c
 8003ef0:	2000118c 	.word	0x2000118c
 8003ef4:	20001190 	.word	0x20001190

08003ef8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d04d      	beq.n	8003fa6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003f0a:	2308      	movs	r3, #8
 8003f0c:	425b      	negs	r3, r3
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4413      	add	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <vPortFree+0xb8>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4013      	ands	r3, r2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10a      	bne.n	8003f3c <vPortFree+0x44>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	60fb      	str	r3, [r7, #12]
}
 8003f38:	bf00      	nop
 8003f3a:	e7fe      	b.n	8003f3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <vPortFree+0x62>
	__asm volatile
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	60bb      	str	r3, [r7, #8]
}
 8003f56:	bf00      	nop
 8003f58:	e7fe      	b.n	8003f58 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <vPortFree+0xb8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01e      	beq.n	8003fa6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d11a      	bne.n	8003fa6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <vPortFree+0xb8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003f80:	f7ff fa16 	bl	80033b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <vPortFree+0xbc>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	4a09      	ldr	r2, [pc, #36]	; (8003fb4 <vPortFree+0xbc>)
 8003f90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f92:	6938      	ldr	r0, [r7, #16]
 8003f94:	f000 f874 	bl	8004080 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003f98:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <vPortFree+0xc0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	4a06      	ldr	r2, [pc, #24]	; (8003fb8 <vPortFree+0xc0>)
 8003fa0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003fa2:	f7ff fa13 	bl	80033cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003fa6:	bf00      	nop
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20001198 	.word	0x20001198
 8003fb4:	20001188 	.word	0x20001188
 8003fb8:	20001194 	.word	0x20001194

08003fbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003fc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003fc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003fc8:	4b27      	ldr	r3, [pc, #156]	; (8004068 <prvHeapInit+0xac>)
 8003fca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00c      	beq.n	8003ff0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3307      	adds	r3, #7
 8003fda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0307 	bic.w	r3, r3, #7
 8003fe2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	4a1f      	ldr	r2, [pc, #124]	; (8004068 <prvHeapInit+0xac>)
 8003fec:	4413      	add	r3, r2
 8003fee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ff4:	4a1d      	ldr	r2, [pc, #116]	; (800406c <prvHeapInit+0xb0>)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003ffa:	4b1c      	ldr	r3, [pc, #112]	; (800406c <prvHeapInit+0xb0>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	4413      	add	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004008:	2208      	movs	r2, #8
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0307 	bic.w	r3, r3, #7
 8004016:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4a15      	ldr	r2, [pc, #84]	; (8004070 <prvHeapInit+0xb4>)
 800401c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800401e:	4b14      	ldr	r3, [pc, #80]	; (8004070 <prvHeapInit+0xb4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2200      	movs	r2, #0
 8004024:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004026:	4b12      	ldr	r3, [pc, #72]	; (8004070 <prvHeapInit+0xb4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	1ad2      	subs	r2, r2, r3
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800403c:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <prvHeapInit+0xb4>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4a0a      	ldr	r2, [pc, #40]	; (8004074 <prvHeapInit+0xb8>)
 800404a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	4a09      	ldr	r2, [pc, #36]	; (8004078 <prvHeapInit+0xbc>)
 8004052:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004054:	4b09      	ldr	r3, [pc, #36]	; (800407c <prvHeapInit+0xc0>)
 8004056:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800405a:	601a      	str	r2, [r3, #0]
}
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	2000057c 	.word	0x2000057c
 800406c:	2000117c 	.word	0x2000117c
 8004070:	20001184 	.word	0x20001184
 8004074:	2000118c 	.word	0x2000118c
 8004078:	20001188 	.word	0x20001188
 800407c:	20001198 	.word	0x20001198

08004080 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004088:	4b27      	ldr	r3, [pc, #156]	; (8004128 <prvInsertBlockIntoFreeList+0xa8>)
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	e002      	b.n	8004094 <prvInsertBlockIntoFreeList+0x14>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	429a      	cmp	r2, r3
 800409c:	d8f7      	bhi.n	800408e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	4413      	add	r3, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d108      	bne.n	80040c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	441a      	add	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	441a      	add	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d118      	bne.n	8004108 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4b14      	ldr	r3, [pc, #80]	; (800412c <prvInsertBlockIntoFreeList+0xac>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d00d      	beq.n	80040fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	441a      	add	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	e008      	b.n	8004110 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80040fe:	4b0b      	ldr	r3, [pc, #44]	; (800412c <prvInsertBlockIntoFreeList+0xac>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	e003      	b.n	8004110 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	429a      	cmp	r2, r3
 8004116:	d002      	beq.n	800411e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800411e:	bf00      	nop
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr
 8004128:	2000117c 	.word	0x2000117c
 800412c:	20001184 	.word	0x20001184

08004130 <__errno>:
 8004130:	4b01      	ldr	r3, [pc, #4]	; (8004138 <__errno+0x8>)
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	20000010 	.word	0x20000010

0800413c <__libc_init_array>:
 800413c:	b570      	push	{r4, r5, r6, lr}
 800413e:	2600      	movs	r6, #0
 8004140:	4d0c      	ldr	r5, [pc, #48]	; (8004174 <__libc_init_array+0x38>)
 8004142:	4c0d      	ldr	r4, [pc, #52]	; (8004178 <__libc_init_array+0x3c>)
 8004144:	1b64      	subs	r4, r4, r5
 8004146:	10a4      	asrs	r4, r4, #2
 8004148:	42a6      	cmp	r6, r4
 800414a:	d109      	bne.n	8004160 <__libc_init_array+0x24>
 800414c:	f000 f996 	bl	800447c <_init>
 8004150:	2600      	movs	r6, #0
 8004152:	4d0a      	ldr	r5, [pc, #40]	; (800417c <__libc_init_array+0x40>)
 8004154:	4c0a      	ldr	r4, [pc, #40]	; (8004180 <__libc_init_array+0x44>)
 8004156:	1b64      	subs	r4, r4, r5
 8004158:	10a4      	asrs	r4, r4, #2
 800415a:	42a6      	cmp	r6, r4
 800415c:	d105      	bne.n	800416a <__libc_init_array+0x2e>
 800415e:	bd70      	pop	{r4, r5, r6, pc}
 8004160:	f855 3b04 	ldr.w	r3, [r5], #4
 8004164:	4798      	blx	r3
 8004166:	3601      	adds	r6, #1
 8004168:	e7ee      	b.n	8004148 <__libc_init_array+0xc>
 800416a:	f855 3b04 	ldr.w	r3, [r5], #4
 800416e:	4798      	blx	r3
 8004170:	3601      	adds	r6, #1
 8004172:	e7f2      	b.n	800415a <__libc_init_array+0x1e>
 8004174:	08004650 	.word	0x08004650
 8004178:	08004650 	.word	0x08004650
 800417c:	08004650 	.word	0x08004650
 8004180:	08004654 	.word	0x08004654

08004184 <__retarget_lock_acquire_recursive>:
 8004184:	4770      	bx	lr

08004186 <__retarget_lock_release_recursive>:
 8004186:	4770      	bx	lr

08004188 <malloc>:
 8004188:	4b02      	ldr	r3, [pc, #8]	; (8004194 <malloc+0xc>)
 800418a:	4601      	mov	r1, r0
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	f000 b87b 	b.w	8004288 <_malloc_r>
 8004192:	bf00      	nop
 8004194:	20000010 	.word	0x20000010

08004198 <free>:
 8004198:	4b02      	ldr	r3, [pc, #8]	; (80041a4 <free+0xc>)
 800419a:	4601      	mov	r1, r0
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	f000 b80b 	b.w	80041b8 <_free_r>
 80041a2:	bf00      	nop
 80041a4:	20000010 	.word	0x20000010

080041a8 <memset>:
 80041a8:	4603      	mov	r3, r0
 80041aa:	4402      	add	r2, r0
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d100      	bne.n	80041b2 <memset+0xa>
 80041b0:	4770      	bx	lr
 80041b2:	f803 1b01 	strb.w	r1, [r3], #1
 80041b6:	e7f9      	b.n	80041ac <memset+0x4>

080041b8 <_free_r>:
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	4605      	mov	r5, r0
 80041bc:	2900      	cmp	r1, #0
 80041be:	d040      	beq.n	8004242 <_free_r+0x8a>
 80041c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041c4:	1f0c      	subs	r4, r1, #4
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bfb8      	it	lt
 80041ca:	18e4      	addlt	r4, r4, r3
 80041cc:	f000 f94a 	bl	8004464 <__malloc_lock>
 80041d0:	4a1c      	ldr	r2, [pc, #112]	; (8004244 <_free_r+0x8c>)
 80041d2:	6813      	ldr	r3, [r2, #0]
 80041d4:	b933      	cbnz	r3, 80041e4 <_free_r+0x2c>
 80041d6:	6063      	str	r3, [r4, #4]
 80041d8:	6014      	str	r4, [r2, #0]
 80041da:	4628      	mov	r0, r5
 80041dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041e0:	f000 b946 	b.w	8004470 <__malloc_unlock>
 80041e4:	42a3      	cmp	r3, r4
 80041e6:	d908      	bls.n	80041fa <_free_r+0x42>
 80041e8:	6820      	ldr	r0, [r4, #0]
 80041ea:	1821      	adds	r1, r4, r0
 80041ec:	428b      	cmp	r3, r1
 80041ee:	bf01      	itttt	eq
 80041f0:	6819      	ldreq	r1, [r3, #0]
 80041f2:	685b      	ldreq	r3, [r3, #4]
 80041f4:	1809      	addeq	r1, r1, r0
 80041f6:	6021      	streq	r1, [r4, #0]
 80041f8:	e7ed      	b.n	80041d6 <_free_r+0x1e>
 80041fa:	461a      	mov	r2, r3
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	b10b      	cbz	r3, 8004204 <_free_r+0x4c>
 8004200:	42a3      	cmp	r3, r4
 8004202:	d9fa      	bls.n	80041fa <_free_r+0x42>
 8004204:	6811      	ldr	r1, [r2, #0]
 8004206:	1850      	adds	r0, r2, r1
 8004208:	42a0      	cmp	r0, r4
 800420a:	d10b      	bne.n	8004224 <_free_r+0x6c>
 800420c:	6820      	ldr	r0, [r4, #0]
 800420e:	4401      	add	r1, r0
 8004210:	1850      	adds	r0, r2, r1
 8004212:	4283      	cmp	r3, r0
 8004214:	6011      	str	r1, [r2, #0]
 8004216:	d1e0      	bne.n	80041da <_free_r+0x22>
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	4401      	add	r1, r0
 800421e:	6011      	str	r1, [r2, #0]
 8004220:	6053      	str	r3, [r2, #4]
 8004222:	e7da      	b.n	80041da <_free_r+0x22>
 8004224:	d902      	bls.n	800422c <_free_r+0x74>
 8004226:	230c      	movs	r3, #12
 8004228:	602b      	str	r3, [r5, #0]
 800422a:	e7d6      	b.n	80041da <_free_r+0x22>
 800422c:	6820      	ldr	r0, [r4, #0]
 800422e:	1821      	adds	r1, r4, r0
 8004230:	428b      	cmp	r3, r1
 8004232:	bf01      	itttt	eq
 8004234:	6819      	ldreq	r1, [r3, #0]
 8004236:	685b      	ldreq	r3, [r3, #4]
 8004238:	1809      	addeq	r1, r1, r0
 800423a:	6021      	streq	r1, [r4, #0]
 800423c:	6063      	str	r3, [r4, #4]
 800423e:	6054      	str	r4, [r2, #4]
 8004240:	e7cb      	b.n	80041da <_free_r+0x22>
 8004242:	bd38      	pop	{r3, r4, r5, pc}
 8004244:	200011a0 	.word	0x200011a0

08004248 <sbrk_aligned>:
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	4e0e      	ldr	r6, [pc, #56]	; (8004284 <sbrk_aligned+0x3c>)
 800424c:	460c      	mov	r4, r1
 800424e:	6831      	ldr	r1, [r6, #0]
 8004250:	4605      	mov	r5, r0
 8004252:	b911      	cbnz	r1, 800425a <sbrk_aligned+0x12>
 8004254:	f000 f8f6 	bl	8004444 <_sbrk_r>
 8004258:	6030      	str	r0, [r6, #0]
 800425a:	4621      	mov	r1, r4
 800425c:	4628      	mov	r0, r5
 800425e:	f000 f8f1 	bl	8004444 <_sbrk_r>
 8004262:	1c43      	adds	r3, r0, #1
 8004264:	d00a      	beq.n	800427c <sbrk_aligned+0x34>
 8004266:	1cc4      	adds	r4, r0, #3
 8004268:	f024 0403 	bic.w	r4, r4, #3
 800426c:	42a0      	cmp	r0, r4
 800426e:	d007      	beq.n	8004280 <sbrk_aligned+0x38>
 8004270:	1a21      	subs	r1, r4, r0
 8004272:	4628      	mov	r0, r5
 8004274:	f000 f8e6 	bl	8004444 <_sbrk_r>
 8004278:	3001      	adds	r0, #1
 800427a:	d101      	bne.n	8004280 <sbrk_aligned+0x38>
 800427c:	f04f 34ff 	mov.w	r4, #4294967295
 8004280:	4620      	mov	r0, r4
 8004282:	bd70      	pop	{r4, r5, r6, pc}
 8004284:	200011a4 	.word	0x200011a4

08004288 <_malloc_r>:
 8004288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800428c:	1ccd      	adds	r5, r1, #3
 800428e:	f025 0503 	bic.w	r5, r5, #3
 8004292:	3508      	adds	r5, #8
 8004294:	2d0c      	cmp	r5, #12
 8004296:	bf38      	it	cc
 8004298:	250c      	movcc	r5, #12
 800429a:	2d00      	cmp	r5, #0
 800429c:	4607      	mov	r7, r0
 800429e:	db01      	blt.n	80042a4 <_malloc_r+0x1c>
 80042a0:	42a9      	cmp	r1, r5
 80042a2:	d905      	bls.n	80042b0 <_malloc_r+0x28>
 80042a4:	230c      	movs	r3, #12
 80042a6:	2600      	movs	r6, #0
 80042a8:	603b      	str	r3, [r7, #0]
 80042aa:	4630      	mov	r0, r6
 80042ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042b0:	4e2e      	ldr	r6, [pc, #184]	; (800436c <_malloc_r+0xe4>)
 80042b2:	f000 f8d7 	bl	8004464 <__malloc_lock>
 80042b6:	6833      	ldr	r3, [r6, #0]
 80042b8:	461c      	mov	r4, r3
 80042ba:	bb34      	cbnz	r4, 800430a <_malloc_r+0x82>
 80042bc:	4629      	mov	r1, r5
 80042be:	4638      	mov	r0, r7
 80042c0:	f7ff ffc2 	bl	8004248 <sbrk_aligned>
 80042c4:	1c43      	adds	r3, r0, #1
 80042c6:	4604      	mov	r4, r0
 80042c8:	d14d      	bne.n	8004366 <_malloc_r+0xde>
 80042ca:	6834      	ldr	r4, [r6, #0]
 80042cc:	4626      	mov	r6, r4
 80042ce:	2e00      	cmp	r6, #0
 80042d0:	d140      	bne.n	8004354 <_malloc_r+0xcc>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	4631      	mov	r1, r6
 80042d6:	4638      	mov	r0, r7
 80042d8:	eb04 0803 	add.w	r8, r4, r3
 80042dc:	f000 f8b2 	bl	8004444 <_sbrk_r>
 80042e0:	4580      	cmp	r8, r0
 80042e2:	d13a      	bne.n	800435a <_malloc_r+0xd2>
 80042e4:	6821      	ldr	r1, [r4, #0]
 80042e6:	3503      	adds	r5, #3
 80042e8:	1a6d      	subs	r5, r5, r1
 80042ea:	f025 0503 	bic.w	r5, r5, #3
 80042ee:	3508      	adds	r5, #8
 80042f0:	2d0c      	cmp	r5, #12
 80042f2:	bf38      	it	cc
 80042f4:	250c      	movcc	r5, #12
 80042f6:	4638      	mov	r0, r7
 80042f8:	4629      	mov	r1, r5
 80042fa:	f7ff ffa5 	bl	8004248 <sbrk_aligned>
 80042fe:	3001      	adds	r0, #1
 8004300:	d02b      	beq.n	800435a <_malloc_r+0xd2>
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	442b      	add	r3, r5
 8004306:	6023      	str	r3, [r4, #0]
 8004308:	e00e      	b.n	8004328 <_malloc_r+0xa0>
 800430a:	6822      	ldr	r2, [r4, #0]
 800430c:	1b52      	subs	r2, r2, r5
 800430e:	d41e      	bmi.n	800434e <_malloc_r+0xc6>
 8004310:	2a0b      	cmp	r2, #11
 8004312:	d916      	bls.n	8004342 <_malloc_r+0xba>
 8004314:	1961      	adds	r1, r4, r5
 8004316:	42a3      	cmp	r3, r4
 8004318:	6025      	str	r5, [r4, #0]
 800431a:	bf18      	it	ne
 800431c:	6059      	strne	r1, [r3, #4]
 800431e:	6863      	ldr	r3, [r4, #4]
 8004320:	bf08      	it	eq
 8004322:	6031      	streq	r1, [r6, #0]
 8004324:	5162      	str	r2, [r4, r5]
 8004326:	604b      	str	r3, [r1, #4]
 8004328:	4638      	mov	r0, r7
 800432a:	f104 060b 	add.w	r6, r4, #11
 800432e:	f000 f89f 	bl	8004470 <__malloc_unlock>
 8004332:	f026 0607 	bic.w	r6, r6, #7
 8004336:	1d23      	adds	r3, r4, #4
 8004338:	1af2      	subs	r2, r6, r3
 800433a:	d0b6      	beq.n	80042aa <_malloc_r+0x22>
 800433c:	1b9b      	subs	r3, r3, r6
 800433e:	50a3      	str	r3, [r4, r2]
 8004340:	e7b3      	b.n	80042aa <_malloc_r+0x22>
 8004342:	6862      	ldr	r2, [r4, #4]
 8004344:	42a3      	cmp	r3, r4
 8004346:	bf0c      	ite	eq
 8004348:	6032      	streq	r2, [r6, #0]
 800434a:	605a      	strne	r2, [r3, #4]
 800434c:	e7ec      	b.n	8004328 <_malloc_r+0xa0>
 800434e:	4623      	mov	r3, r4
 8004350:	6864      	ldr	r4, [r4, #4]
 8004352:	e7b2      	b.n	80042ba <_malloc_r+0x32>
 8004354:	4634      	mov	r4, r6
 8004356:	6876      	ldr	r6, [r6, #4]
 8004358:	e7b9      	b.n	80042ce <_malloc_r+0x46>
 800435a:	230c      	movs	r3, #12
 800435c:	4638      	mov	r0, r7
 800435e:	603b      	str	r3, [r7, #0]
 8004360:	f000 f886 	bl	8004470 <__malloc_unlock>
 8004364:	e7a1      	b.n	80042aa <_malloc_r+0x22>
 8004366:	6025      	str	r5, [r4, #0]
 8004368:	e7de      	b.n	8004328 <_malloc_r+0xa0>
 800436a:	bf00      	nop
 800436c:	200011a0 	.word	0x200011a0

08004370 <cleanup_glue>:
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	460c      	mov	r4, r1
 8004374:	6809      	ldr	r1, [r1, #0]
 8004376:	4605      	mov	r5, r0
 8004378:	b109      	cbz	r1, 800437e <cleanup_glue+0xe>
 800437a:	f7ff fff9 	bl	8004370 <cleanup_glue>
 800437e:	4621      	mov	r1, r4
 8004380:	4628      	mov	r0, r5
 8004382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004386:	f7ff bf17 	b.w	80041b8 <_free_r>
	...

0800438c <_reclaim_reent>:
 800438c:	4b2c      	ldr	r3, [pc, #176]	; (8004440 <_reclaim_reent+0xb4>)
 800438e:	b570      	push	{r4, r5, r6, lr}
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4604      	mov	r4, r0
 8004394:	4283      	cmp	r3, r0
 8004396:	d051      	beq.n	800443c <_reclaim_reent+0xb0>
 8004398:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800439a:	b143      	cbz	r3, 80043ae <_reclaim_reent+0x22>
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d14a      	bne.n	8004438 <_reclaim_reent+0xac>
 80043a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043a4:	6819      	ldr	r1, [r3, #0]
 80043a6:	b111      	cbz	r1, 80043ae <_reclaim_reent+0x22>
 80043a8:	4620      	mov	r0, r4
 80043aa:	f7ff ff05 	bl	80041b8 <_free_r>
 80043ae:	6961      	ldr	r1, [r4, #20]
 80043b0:	b111      	cbz	r1, 80043b8 <_reclaim_reent+0x2c>
 80043b2:	4620      	mov	r0, r4
 80043b4:	f7ff ff00 	bl	80041b8 <_free_r>
 80043b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80043ba:	b111      	cbz	r1, 80043c2 <_reclaim_reent+0x36>
 80043bc:	4620      	mov	r0, r4
 80043be:	f7ff fefb 	bl	80041b8 <_free_r>
 80043c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80043c4:	b111      	cbz	r1, 80043cc <_reclaim_reent+0x40>
 80043c6:	4620      	mov	r0, r4
 80043c8:	f7ff fef6 	bl	80041b8 <_free_r>
 80043cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80043ce:	b111      	cbz	r1, 80043d6 <_reclaim_reent+0x4a>
 80043d0:	4620      	mov	r0, r4
 80043d2:	f7ff fef1 	bl	80041b8 <_free_r>
 80043d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80043d8:	b111      	cbz	r1, 80043e0 <_reclaim_reent+0x54>
 80043da:	4620      	mov	r0, r4
 80043dc:	f7ff feec 	bl	80041b8 <_free_r>
 80043e0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80043e2:	b111      	cbz	r1, 80043ea <_reclaim_reent+0x5e>
 80043e4:	4620      	mov	r0, r4
 80043e6:	f7ff fee7 	bl	80041b8 <_free_r>
 80043ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80043ec:	b111      	cbz	r1, 80043f4 <_reclaim_reent+0x68>
 80043ee:	4620      	mov	r0, r4
 80043f0:	f7ff fee2 	bl	80041b8 <_free_r>
 80043f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043f6:	b111      	cbz	r1, 80043fe <_reclaim_reent+0x72>
 80043f8:	4620      	mov	r0, r4
 80043fa:	f7ff fedd 	bl	80041b8 <_free_r>
 80043fe:	69a3      	ldr	r3, [r4, #24]
 8004400:	b1e3      	cbz	r3, 800443c <_reclaim_reent+0xb0>
 8004402:	4620      	mov	r0, r4
 8004404:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004406:	4798      	blx	r3
 8004408:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800440a:	b1b9      	cbz	r1, 800443c <_reclaim_reent+0xb0>
 800440c:	4620      	mov	r0, r4
 800440e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004412:	f7ff bfad 	b.w	8004370 <cleanup_glue>
 8004416:	5949      	ldr	r1, [r1, r5]
 8004418:	b941      	cbnz	r1, 800442c <_reclaim_reent+0xa0>
 800441a:	3504      	adds	r5, #4
 800441c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800441e:	2d80      	cmp	r5, #128	; 0x80
 8004420:	68d9      	ldr	r1, [r3, #12]
 8004422:	d1f8      	bne.n	8004416 <_reclaim_reent+0x8a>
 8004424:	4620      	mov	r0, r4
 8004426:	f7ff fec7 	bl	80041b8 <_free_r>
 800442a:	e7ba      	b.n	80043a2 <_reclaim_reent+0x16>
 800442c:	680e      	ldr	r6, [r1, #0]
 800442e:	4620      	mov	r0, r4
 8004430:	f7ff fec2 	bl	80041b8 <_free_r>
 8004434:	4631      	mov	r1, r6
 8004436:	e7ef      	b.n	8004418 <_reclaim_reent+0x8c>
 8004438:	2500      	movs	r5, #0
 800443a:	e7ef      	b.n	800441c <_reclaim_reent+0x90>
 800443c:	bd70      	pop	{r4, r5, r6, pc}
 800443e:	bf00      	nop
 8004440:	20000010 	.word	0x20000010

08004444 <_sbrk_r>:
 8004444:	b538      	push	{r3, r4, r5, lr}
 8004446:	2300      	movs	r3, #0
 8004448:	4d05      	ldr	r5, [pc, #20]	; (8004460 <_sbrk_r+0x1c>)
 800444a:	4604      	mov	r4, r0
 800444c:	4608      	mov	r0, r1
 800444e:	602b      	str	r3, [r5, #0]
 8004450:	f7fc fc46 	bl	8000ce0 <_sbrk>
 8004454:	1c43      	adds	r3, r0, #1
 8004456:	d102      	bne.n	800445e <_sbrk_r+0x1a>
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	b103      	cbz	r3, 800445e <_sbrk_r+0x1a>
 800445c:	6023      	str	r3, [r4, #0]
 800445e:	bd38      	pop	{r3, r4, r5, pc}
 8004460:	200011a8 	.word	0x200011a8

08004464 <__malloc_lock>:
 8004464:	4801      	ldr	r0, [pc, #4]	; (800446c <__malloc_lock+0x8>)
 8004466:	f7ff be8d 	b.w	8004184 <__retarget_lock_acquire_recursive>
 800446a:	bf00      	nop
 800446c:	2000119c 	.word	0x2000119c

08004470 <__malloc_unlock>:
 8004470:	4801      	ldr	r0, [pc, #4]	; (8004478 <__malloc_unlock+0x8>)
 8004472:	f7ff be88 	b.w	8004186 <__retarget_lock_release_recursive>
 8004476:	bf00      	nop
 8004478:	2000119c 	.word	0x2000119c

0800447c <_init>:
 800447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447e:	bf00      	nop
 8004480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004482:	bc08      	pop	{r3}
 8004484:	469e      	mov	lr, r3
 8004486:	4770      	bx	lr

08004488 <_fini>:
 8004488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448a:	bf00      	nop
 800448c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800448e:	bc08      	pop	{r3}
 8004490:	469e      	mov	lr, r3
 8004492:	4770      	bx	lr
